{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Features:\n",
    "age: Patient age in years(Numerical); domain: 29 - 77\n",
    "sex: Gender(Binary); domain: 0 -female, 1 - male\n",
    "chp: Chest pain type(Nominal); domain: 1-typical angina, 2-atypical angina, 3-nonanginal pain, 4-asymptomatic\n",
    "bp: Resting Blood Pressure(Numerical); domain: 94 to 200\n",
    "Sch: Serium cholesterol(Numerical); domain: 126 - 564\n",
    "Fbs: Fast Blood Sugar > 120mg/dL(Binary); domain: 0 - False, 1 - True\n",
    "Ecg: Resting Electrocardiographic result(Nominal); domain: 0 - normal, 1- having ST-T wave abnormality, 2-left ventricular hypertrophy\n",
    "Mhrt: Maximum Heart Rate(Numerical); domain: 71 - 200\n",
    "Exian: Exercise Induced Angina(Binary); domain: 0 - no, 1 - yes\n",
    "Opk: Old peak(Numerical); domain: continuous (0-6.2)\n",
    "Slope: Slope of peak exercise ST segment(Nominal); domain: 1 - upsloping, 2 - flat, 3 - downsloping \n",
    "Vessel: Number of major Vessels(Nominal); domain: 0 - 3\n",
    "Thal: Defect Type(Nominal); domain: 3 - normal, 6 - fixed defect, 7 - reversible defect\n",
    "Class: Heart Disease(Binary); domain: 0 - Absence, 1 - Presence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importation of Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, classification_report\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading the csv file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = r\"C:\\Users\\Rise Networks\\Documents\\Heart_Disease\\Heart_data.csv\"\n",
    "df = pd.read_csv(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>187.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex   cp  trestbps   chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
       "0  63.0  1.0  1.0     145.0  233.0  1.0      2.0    150.0    0.0      2.3   \n",
       "1  67.0  1.0  4.0     160.0  286.0  0.0      2.0    108.0    1.0      NaN   \n",
       "2  67.0  1.0  4.0     120.0  229.0  0.0      2.0    129.0    1.0      2.6   \n",
       "3  37.0  1.0  3.0     130.0  250.0  0.0      NaN    187.0    0.0      3.5   \n",
       "4  41.0  0.0  2.0     130.0  204.0  0.0      2.0    172.0    0.0      1.4   \n",
       "\n",
       "   slope   ca  thal  target  \n",
       "0    3.0  0.0   6.0       0  \n",
       "1    2.0  3.0   3.0       2  \n",
       "2    2.0  2.0   7.0       1  \n",
       "3    3.0  0.0   3.0       0  \n",
       "4    1.0  0.0   3.0       0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename(columns=\n",
    "          {\n",
    "              \"cp\": \"chest_pain\", \"trestbps\":\"resting_bp\", \"restecg\":\"rest_ecg\", \"thalach\":\"max_hrt\", \"ca\":\"vessel\"\n",
    "          }, inplace=True\n",
    "         )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking the shape of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1592, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking for Null values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age            79\n",
       "sex            31\n",
       "chest_pain    159\n",
       "resting_bp      0\n",
       "chol           63\n",
       "fbs            79\n",
       "rest_ecg        7\n",
       "max_hrt         0\n",
       "exang          47\n",
       "oldpeak        31\n",
       "slope          54\n",
       "vessel          0\n",
       "thal            7\n",
       "target          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Filling up the null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df.columns:\n",
    "    if df[i].isna().sum() != 0:\n",
    "        df[i] = df[i].fillna(method=\"ffill\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking for duplicate values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "549"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dropping duplicate values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1043, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1043 entries, 0 to 1591\n",
      "Data columns (total 14 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   age         1043 non-null   float64\n",
      " 1   sex         1043 non-null   float64\n",
      " 2   chest_pain  1043 non-null   float64\n",
      " 3   resting_bp  1043 non-null   float64\n",
      " 4   chol        1043 non-null   float64\n",
      " 5   fbs         1043 non-null   float64\n",
      " 6   rest_ecg    1043 non-null   float64\n",
      " 7   max_hrt     1043 non-null   float64\n",
      " 8   exang       1043 non-null   float64\n",
      " 9   oldpeak     1043 non-null   float64\n",
      " 10  slope       1043 non-null   float64\n",
      " 11  vessel      1043 non-null   float64\n",
      " 12  thal        1043 non-null   float64\n",
      " 13  target      1043 non-null   int64  \n",
      "dtypes: float64(13), int64(1)\n",
      "memory usage: 122.2 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>chest_pain</th>\n",
       "      <th>resting_bp</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>rest_ecg</th>\n",
       "      <th>max_hrt</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>vessel</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "      <td>1043.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.165868</td>\n",
       "      <td>0.684564</td>\n",
       "      <td>2.132311</td>\n",
       "      <td>131.548418</td>\n",
       "      <td>247.135187</td>\n",
       "      <td>0.140940</td>\n",
       "      <td>0.792905</td>\n",
       "      <td>149.946309</td>\n",
       "      <td>0.318313</td>\n",
       "      <td>1.048130</td>\n",
       "      <td>1.491850</td>\n",
       "      <td>0.680729</td>\n",
       "      <td>3.557047</td>\n",
       "      <td>0.859060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.094635</td>\n",
       "      <td>0.464912</td>\n",
       "      <td>1.466759</td>\n",
       "      <td>17.753816</td>\n",
       "      <td>51.381527</td>\n",
       "      <td>0.348126</td>\n",
       "      <td>0.840018</td>\n",
       "      <td>23.139172</td>\n",
       "      <td>0.466045</td>\n",
       "      <td>1.160202</td>\n",
       "      <td>0.633881</td>\n",
       "      <td>0.962185</td>\n",
       "      <td>1.876042</td>\n",
       "      <td>0.856432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>212.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>243.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>154.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>275.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.200000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age          sex   chest_pain   resting_bp         chol  \\\n",
       "count  1043.000000  1043.000000  1043.000000  1043.000000  1043.000000   \n",
       "mean     54.165868     0.684564     2.132311   131.548418   247.135187   \n",
       "std       9.094635     0.464912     1.466759    17.753816    51.381527   \n",
       "min      29.000000     0.000000     0.000000    94.000000   126.000000   \n",
       "25%      47.000000     0.000000     1.000000   120.000000   212.000000   \n",
       "50%      55.000000     1.000000     2.000000   130.000000   243.000000   \n",
       "75%      60.000000     1.000000     3.000000   140.000000   275.000000   \n",
       "max      77.000000     1.000000     4.000000   200.000000   564.000000   \n",
       "\n",
       "               fbs     rest_ecg      max_hrt        exang      oldpeak  \\\n",
       "count  1043.000000  1043.000000  1043.000000  1043.000000  1043.000000   \n",
       "mean      0.140940     0.792905   149.946309     0.318313     1.048130   \n",
       "std       0.348126     0.840018    23.139172     0.466045     1.160202   \n",
       "min       0.000000     0.000000    71.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000   133.000000     0.000000     0.000000   \n",
       "50%       0.000000     1.000000   154.000000     0.000000     0.800000   \n",
       "75%       0.000000     2.000000   168.000000     1.000000     1.600000   \n",
       "max       1.000000     2.000000   202.000000     1.000000     6.200000   \n",
       "\n",
       "             slope       vessel         thal       target  \n",
       "count  1043.000000  1043.000000  1043.000000  1043.000000  \n",
       "mean      1.491850     0.680729     3.557047     0.859060  \n",
       "std       0.633881     0.962185     1.876042     0.856432  \n",
       "min       0.000000     0.000000     0.000000     0.000000  \n",
       "25%       1.000000     0.000000     2.000000     0.000000  \n",
       "50%       1.000000     0.000000     3.000000     1.000000  \n",
       "75%       2.000000     1.000000     3.000000     1.000000  \n",
       "max       3.000000     4.000000     7.000000     4.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking for outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 900x500 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = 1\n",
    "plt.figure(figsize=(9,5))\n",
    "for i in df.drop(columns=[\"sex\", \"fbs\", \"exang\", \"target\"]).columns.to_list():\n",
    "    plt.subplot(4, 3, count)\n",
    "    plt.boxplot(df[i])\n",
    "    count += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing Outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "outliers_df = df.drop(columns=[\"sex\", \"fbs\", \"exang\", \"target\"])\n",
    "for i in outliers_df:\n",
    "    min_quantile, max_quantile = df[i].quantile([0.02, 0.975])\n",
    "    df = df[(df[i] >= min_quantile) & (df[i] <= max_quantile)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fixing the target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "binary = []\n",
    "non_binary = []\n",
    "for i in df[\"target\"]:\n",
    "    if i < 2:\n",
    "        binary.append(i)\n",
    "    else:\n",
    "        non_binary.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "82.43559718969556"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(binary) / (len(binary) + len(non_binary)) * 100"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Since the non_binary numbers are greater than 10%, we have to look for a way to assign 2,3 and 4 to 0 and 1\n",
    "\n",
    "We can say 2-4 should be assigned to 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def target(x):\n",
    "    if x >= 1:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "df[\"target\"] = df[\"target\"].map(target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking if the data is balanced "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target\n",
       "1    0.624122\n",
       "0    0.375878\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"target\"].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Balancing the imbalanced data using Imblearn library "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "over_sampler =RandomOverSampler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(columns=\"target\")\n",
    "y = df[\"target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_over, y_over = over_sampler.fit_resample(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "sampled_df = pd.concat([X_over, y_over], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in sampled_df.drop(columns=\"oldpeak\").columns.to_list():\n",
    "    sampled_df[i] = sampled_df[i].astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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vx+RkZEm87sOODNx4kQA/zfgzIYNG1zRZHIgS6OGEfWESR0i8jjWXK1SqVRob29HY2Ojyd06DQ0NPY62198rWl31dcXHU/Xn6o6788aYAM+Pq6erjdZcWSYi8lSLFy9GcXExPvjgAwQHB0t3FQ8ePBgBAQGQyWQccIaILHLqkOZERPbQ9WqVkfFqlTFhExsbC7lcblKnvr4eJ0+e7DGpQ0REROQKW7ZsQVNTE5KSkhAeHi693n//fanO8uXLkZWVhczMTMTFxeHSpUsccIbIxUat/Mjk5Qq8U4eI3FJLSwu++eYbabqurg7Hjh1DaGgoRowY0efVqsGDB2PRokVYunQpwsLCEBoaimXLliEmJkYaDYuIiIjIHfQ20IwRB5whIkuY1CEit3T48GFMnTpVmjb2dbNgwQIUFhZi+fLlaGtrQ2ZmJhobGxEfH292tWrTpk3w9fVFeno62traMG3aNBQWFsLHx8fp8RAREREREdkbkzpE5JaSkpJ6vWplzdUqf39/FBQUoKCgwAEtJCIiIiIici32qUNERERERERE5IF4p87/071To3OvPOCilhARERERERER9Y1JHSIiIiIiIvIalkYh6uuivatGLiK6Xnz8ioiIiIiIiIjIAzGpQ0RERERERETkgZjUISIiIiIiIiLyQOxTh4iIiIiIiExwIJm+eVs/PN4Wz0DBpA4RERERERHRAGKPBA6TQO6Bj18REREREREREXkg3qlDREREREREHoOPhnkX7s/rwzt1iIiIiIiIiIg8EJM6REREREREREQeiEkdIiIiIiIiIiIPxKQOEREREREREZEHYkfJRERERERERDSgOKODZkvDvtt7O7xTh4iIiIiIiIjIAzGpQ0RERERERETkgfj4FREREREREV03S4+aEA0krvgOMKlDREREREREHovJJO/ijL5uvIlLH7968803ERkZCX9/f8TGxuLzzz93ZXN6NWrlR2YvIvIMnnSsISLPxWMNETkDjzVE1JXLkjrvv/8+srKysHr1ahw9ehT33nsvUlNT8d1337mqSUTkhXisISJn4LGGiJyBxxoi3nDRncuSOhs3bsSiRYvwr//6rxg3bhzy8/MRERGBLVu2uKpJROSFeKwhImfgsYaInIHHGiLqziV96rS3t6O6uhorV640KU9JSUFlZaVZfb1eD71eL003NTUBAP73f/8XBoOhz+35/nLFZPqnn36yuU73+ZaYLWO4gtbWTvgaBqGjU2bdMlZsxx7rcNQyvp2i15id0VZr9q81rN2uMeaffvoJcrncpu3ao639Wcf1bre3mLu7fPkyAEAIYfX67cWZxxqDwYDW1laTz76l99nTGOOyZl97Cm+MCfCeuLofi6w93vBY47l8f7li8vvB0+MxsrSvAM/eX960r3isMT/WdP9/pD/nUNZw1rlLb+vo6fvpDM4+/+vps+2sfdfXOqxZj63nZdYen6z5jNu6DmtYsx2bjjXCBS5duiQAiL///e8m5S+//LIYM2aMWf0//elPAgBffPHlwa8LFy446xAj4bGGL74G3ovHGr744ssZLx5r+OKLL2e8rDnWuHT0K5nMNCsqhDArA4BVq1YhOztbmu7s7MT//u//IiwszGJ9d9Hc3IyIiAhcuHABISEhrm6OUzBmxtydEAKXL1+GWq12UuvMOeNY462fA2+MyxtjAhgXjzWezRvj8saYAMblzccab923ljBW7+RNsdpyrHFJUmfo0KHw8fGBTqczKW9oaIBSqTSrr1AooFAoTMpuvPFGRzbRrkJCQjz+Q2UrxjwwWBvz4MGDndAac6441njr58Ab4/LGmICBHRePNZ7PG+PyxpiAgR2Xtx9rvHXfWsJYvZO3xGrtscYlHSX7+fkhNjYWWq3WpFyr1SIhIcEVTSIiL8RjDRE5A481ROQMPNYQkSUue/wqOzsb8+fPR1xcHCZPnoytW7fiu+++w9NPP+2qJhGRF+KxhoicgccaInIGHmuIqDuXJXUefvhh/PTTT3jppZdQX1+P6Oho7N27FyNHjnRVk+xOoVDgT3/6k9ltj96MMQ8MnhSzs441nvSe2MIb4/LGmADG5Wo81lwfb4zLG2MCGJerOfJY4ynvgT0wVu80kGLtSiaEC8bjIyIiIiIiIiKi6+KSPnWIiIiIiIiIiOj6MKlDREREREREROSBmNQhIiIiIiIiIvJATOoQEREREREREXkgJnXsLDc3FzKZDFlZWVKZEAIajQZqtRoBAQFISkpCTU2N6xp5nTQaDWQymclLpVJJ870tXqNLly7hscceQ1hYGAIDA3HnnXeiurpamu+NcY8aNcpsX8tkMixevBiAd8Zs9OabbyIyMhL+/v6IjY3F559/3mv9iooKxMbGwt/fH6NHj8Zbb71lVmfnzp24/fbboVAocPvtt6O0tNRRze+RLXHt2rULycnJuOmmmxASEoLJkydj3759JnUKCwstfkauXr3q6FBM2BLX/v37Lbb5n//8p0k9V+8vW2JauHChxZjGjx8v1XGHfXXgwAHMnDkTarUaMpkMu3fv7nMZT/luOYutxyZ315/PhLvLzc3FXXfdheDgYAwbNgyzZ89GbW2tq5t13bZs2YI77rgDISEh0v8JH3/8saubZVeWfsd7g76+Z9b8ntPr9ViyZAmGDh2KoKAgzJo1CxcvXnRiFH3rLU6DwYAVK1YgJiYGQUFBUKvVePzxx/H999+brMMT4gRsO3ZmZGRAJpMhPz/fpNybYj116hRmzZqFwYMHIzg4GJMmTcJ3330nzfeUWPuLSR07qqqqwtatW3HHHXeYlOfl5WHjxo3YvHkzqqqqoFKpkJycjMuXL7uopddv/PjxqK+vl14nTpyQ5nljvI2NjZgyZQrkcjk+/vhjfP3113jttddw4403SnW8Me6qqiqT/azVagEADz30EADvjBkA3n//fWRlZWH16tU4evQo7r33XqSmppr859BVXV0dfv3rX+Pee+/F0aNH8cILL+DZZ5/Fzp07pTpffPEFHn74YcyfPx//+Mc/MH/+fKSnp+PLL790Vlg2x3XgwAEkJydj7969qK6uxtSpUzFz5kwcPXrUpF5ISIjJ56S+vh7+/v7OCAmA7XEZ1dbWmrQ5KipKmufq/WVrTK+//rpJLBcuXEBoaKj0XTVy9b66cuUKJkyYgM2bN1tV31O+W87S38+6O7P1M+EJKioqsHjxYhw6dAharRa//PILUlJScOXKFVc37boMHz4cr7zyCg4fPozDhw/jV7/6FR588EGvuZjT0+94b9DX98ya33NZWVkoLS1FSUkJDh48iJaWFqSlpaGjo8NZYfSptzhbW1tx5MgRrFmzBkeOHMGuXbtw+vRpzJo1y6SeJ8QJWH/s3L17N7788kuo1Wqzed4S67fffot77rkHY8eOxf79+/GPf/wDa9asMfl94ymx9psgu7h8+bKIiooSWq1WJCYmiueee04IIURnZ6dQqVTilVdekepevXpVDB48WLz11lsuau31+dOf/iQmTJhgcZ43xiuEECtWrBD33HNPj/O9Ne7unnvuOXHLLbeIzs5Or4757rvvFk8//bRJ2dixY8XKlSst1l++fLkYO3as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cW3YsEHccsstwt/fXwwZMkTcc8894qOPPjJbp6v3l62fwZ9//lkEBASYHZuM3GFfGYeT7+kz5cnfLWfp7XPhifr6THgiS/EAENu3b3d1067Lk08+KX32brrpJjFt2jSvS+gI4Z1Jnb6+Z9b8nmtraxPPPPOMCA0NFQEBASItLU189913LoimZ73FWVdX1+N387PPPpPW4QlxCmH7sdNSUsebYt22bZu49dZbhb+/v5gwYYLYvXu3yTo8Jdb+kgnx/3ocJCIiIiIiIiIij8E+dYiIiIiIiIiIPBCTOkREREREREREHohJHSIiIiIiIiIiD8SkDhERERERERGRB2JSh4iIiIiIiIjIAzGpQ0RERERERETkgZjUISIiIiIiIiLyQEzqEBERERERERF5ICZ1iIiIiMjrnTt3DjKZDMeOHXN1U+wuKSkJWVlZrm4GEdmZK45bCxcuxOzZs522Pbp+vq5uABERERGRN0hKSsKdd96J/Px8p253165dkMvlTt0mEdnXwoUL8fPPP2P37t1SWUREBOrr6zF06FDXNYzcHpM6REREREQeLDQ01NVNIBrw2tvb4efnZ9d1+vj4QKVS2XWd5H34+BU53CeffIJ77rkHN954I8LCwpCWloZvv/1Wml9ZWYk777wT/v7+iIuLw+7du81uM/z666/x61//GjfccAOUSiXmz5+PH3/80QXREJE7++///m/ExMQgICAAYWFhmD59Oq5cuQIA2L59O8aNGwd/f3+MHTsWb775prTck08+iTvuuAN6vR4AYDAYEBsbi3nz5rkkDiLqv87OTmzYsAG33norFAoFRowYgZdfflmaf/bsWUydOhWBgYGYMGECvvjiC5PlKysrcd999yEgIAARERF49tlnpeMIALz55puIioqCv78/lEolfve73wG4dpW9oqICr7/+OmQyGWQyGc6dO9drW/fv3w+ZTIaPPvoIEyZMgL+/P+Lj43HixAmpzk8//YRHH30Uw4cPR2BgIGJiYvDee++ZrKf741ejRo1CTk4OnnzySQQHB2PEiBHYunWrrW8lEfUiKSkJzzzzDLKzszF06FAkJyf3ec7S0+8UjUaDoqIifPDBB9LxY//+/WaPXxmPGZ9++ini4uIQGBiIhIQE1NbWmrRt/fr1GDZsGIKDg/Gv//qvWLlyJe68806b4lu7di2GDRuGkJAQZGRk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DTdg+PDhJmVdHTp0CFFRUSYXzMg5mNQhhxoyZAjCwsKwdetWfPPNN/jb3/6G7Oxsaf7cuXPR2dmJ3//+9zh16hT27duHf//3fwfwf5ngxYsX43//93/x6KOP4quvvsLZs2dRVlaGJ598krf3EZHkyy+/RE5ODg4fPozvvvsOu3btwv/8z/9g3Lhx0Gg0yM3Nxeuvv47Tp0/jxIkT2L59OzZu3AgAOHbsGF588UVs27YNU6ZMweuvv47nnnsOZ8+edXFURGQLf39/rFixAsuXL8c777yDb7/9FocOHcK2bdusWn7FihX44osvsHjxYhw7dgxnzpzBnj17sGTJEgDAX//6V/z5z3/GsWPHcP78ebzzzjvo7OzEbbfdBuDaqFNffvklzp07hx9//NHqO2NeeuklfPrppzh58iQWLlyIoUOHYvbs2QCAW2+9Vbq6f+rUKWRkZECn09n+5hCRQ/V1ztLb7xTg2vHj+PHjqK2txY8//giDwdCvdixZsgTbtm1DUVERzpw5g/Xr1+P48eM23WXT3t6ORYsW4euvv8bHH3+MP/3pT3jmmWcwaND/pQ8uXLiA7Oxs1NbW4r333kNBQQGee+65frWZrg8fvyKHGjRoEEpKSvDss88iOjoat912G/785z8jKSkJABASEoIPP/wQ//Zv/4Y777wTMTExePHFFzF37lypnx21Wo2///3vWLFiBWbMmAG9Xo+RI0fi/vvvNzmwENHAFhISggMHDiA/Px/Nzc0YOXIkXnvtNaSmpgIAAgMD8eqrr2L58uUICgpCTEwMsrKycPXqVcybNw8LFy7EzJkzAQCLFi3CRx99hPnz5+PAgQO86kTkQdasWQNfX1+8+OKL+P777xEeHo6nn37aqmXvuOMOVFRUYPXq1bj33nshhMAtt9yChx9+GABw4403YteuXdBoNLh69SqioqLw3nvvYfz48QCAZcuWYcGCBbj99tvR1taGuro6jBo1qs/tvvLKK3juuedw5swZTJgwAXv27JHuDFqzZg3q6uowY8YMBAYG4ve//z1mz56Npqam/r1BROQQfZ2z9PU75amnnsL+/fsRFxeHlpYWfPbZZ1YdP7qbN28ezp49i2XLluHq1atIT0/HwoULze7e6c20adMQFRWF++67D3q9Ho888gg0Go1JnccffxxtbW24++674ePjgyVLluD3v/+9ze2l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rmlYS881lgp1XnjhBaWlpWnp0qXav3+/br/9dk2YMEEnTpyot/2xY8d099136/bbb9f+/fv1xBNP6LHHHtOLL77obvOnP/1JDzzwgB5++GH99a9/1cMPP6xp06bpvffea61ued2vXbt2KSUlRdu2bVNRUZHuvPNOTZo0Sfv37/doFxYWpuLiYo9HUFBQa3RJkvf9qnX06FGPmuPj493bfP15eduntWvXevTl5MmTioiI0P333+/Rztef1blz5zRkyBCtW7euSe2t8rvVWq72u25F3n5XrKygoEBz587Vnj17lJ+frwsXLig1NVXnzp3zdWnNrlevXnr66ae1b98+7du3T9/4xjd077336siRI74uDZfoSHONtzrS3OStjjSXeYu5r37MNQ1jrmkYc03DWnyuMRZy6623mkceecRj3cCBA83ixYvrbb9o0SIzcOBAj3WzZ882I0eOdC9PmzbN3HXXXR5txo8fb771rW81U9VX5m2/6jNo0CCzbNky9/Jzzz1nwsPDm6vEq+Jtv95++20jyZSVlTX4mr7+vK71s8rNzTU2m818+umn7nVt4bO6lCSTm5vbaBur/G61lub4HbaipnxX2pPS0lIjyRQUFPi6lFbRrVs381//9V++LgOX6Khzjbc62tzkrY42l3mLuY+5pqmYaxrHXNO45pxrLHOkTlVVlYqKipSamuqxPjU1VYWFhfU+509/+lOd9uPHj9e+ffvkcrkabdPQaza3q+nX5WpqanT27FlFRER4rK+oqFCfPn3Uq1cvTZw4sc6RPC3pWvo1dOhQRUdHa9y4cXr77bc9tvny82qOz2rTpk1KTk5Wnz59PNb78rO6Glb43WotzfG9gDWcOXNGkurMte1NdXW1cnJydO7cOY0aNcrX5eCfmGvQXDrKXOYt5r6LmGvQXJhr6tcSc41/s7xKK/j8889VXV2tyMhIj/WRkZEqKSmp9zklJSX1tr9w4YI+//xzRUdHN9imoddsblfTr8utXLlS586d07Rp09zrBg4cqKysLA0ePFjl5eVau3atRo8erb/+9a8epzO1lKvpV3R0tDZu3KjExEQ5nU5t2bJF48aN086dO3XHHXdIavgzbY3P61o/q+LiYr3xxhvKzs72WO/rz+pqWOF3q7U0x+8w2j5jjObPn6/bbrtNCQkJvi6nRRw6dEijRo3SV199pS5duig3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lVJSUjzWV1VVaejQoZKk+++/X7m5uVqxYoU2bNig/v37e7T95S9/qf/6r//S8ePHdf78eVVVVdW5i8yNN94oPz8/93J0dLT7kOWjR4/K399ft9xyi3t7v3791K1bt+bsKoAW9vHHH8vlcmn06NHudQEBAbr11lv1wQcfaPjw4R7tP/jgA913330e60aNGqXt27d7rOvdu7d69erl0aampkZHjx6Vn5+fTp48qVmzZul73/ueu82FCxcUHh7uXv7973+vNWvW6KOPPlJFRYUuXLigsLAwj/c5ceKEkpOTtXz5cj3++ONXPxAA2oQhQ4Zo3LhxGjx4sMaPH6/U1FR985vfrPP3xZXmrkuNGjXK/XNERIQGDBjgblNUVKSPPvpIzz//vLuNMUY1NTU6duyYbrjhhpboJgAfePDBB/X9739f69evl91u1/PPP69vfetb8vPzU1FRkfbu3auf/exn7vbV1dX66quvVFlZqfvvv19r1qzR9ddfr7vuukt33323Jk2aJH9/f6WkpKhPnz7ubXfddZfuu+8+hYSENGm/DdZEqINrUnsu6Ouvv66vfe1rHtvsdrskqbKyUkVFRfLz89OHH37o0ea3v/2tHn/8ca1cuVKjRo1SaGiofv7zn+u9997zaBcQEOCxbLPZ3O9t/nm9nss1tB5A21T7O2uz2eqsv3zdpe29Vftal84jv/71rzVixAiPdrVB8p49e/Stb31Ly5Yt0/jx4xUeHq6cnBytXLnSo/11112nmJgY5eTkaNasWXVCHwDW4ufnp/z8fBUWFiovL0+ZmZlaunRpnb9RvJ27LlfbpqamRrNnz/a4Nkat3r17X203ALRBkyZNUk1NjV5//XUNHz5c77zzjlatWiXp4lywbNkyTZ06tc7zgoKCFBsbq6NHjyo/P187duzQnDlz9POf/1wFBQUKDQ3VX/7yF+3cuVN5eXn6yU9+IofDob179zZpvw3WRKiDazJo0CDZ7XadOHFCY8aMqbfNggUL1KlTJ73xxhu6++67dc899+gb3/iGJOmdd95RUlKS5syZ427/8ccfe1XDwIEDdeHCBe3fv1+JiYmSpI8++qjOhVABtG39+vVTYGCgdu/erenTp0uSXC6X9u3bp7S0tDrtBw0apD179nisu3xZungEzWeffaaYmBhJ0p/+9Cd16tRJ/fv3V2RkpL72ta/pk08+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",
      "text/plain": [
       "<Figure size 1400x1400 with 13 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = 1\n",
    "plt.figure(figsize=(14,14))\n",
    "for i in sampled_df.drop(columns=\"target\").columns.to_list():\n",
    "    plt.subplot(4, 4, count)\n",
    "    sampled_df[i].hist(bins = 50)\n",
    "    plt.xlabel(i)\n",
    "    count += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "sns.heatmap(sampled_df.corr(), annot=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What gender has the highest number of persons with the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target  sex\n",
       "1.0     1      363\n",
       "        0      170\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_df[\"sex\"].groupby(sampled_df[\"target\"][sampled_df[\"target\"] == 1]).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"sex\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "From the analysis above, males have the highest number of people with the heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What age category has the highest number of persons with the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def age_category(x):\n",
    "    if (x <=  71) & (x >= 65):\n",
    "        return \"old\"\n",
    "    elif (x <= 64) & (x >= 55):\n",
    "        return \"senior_adult\"\n",
    "    elif (x <= 54) & (x >= 45):\n",
    "        return \"adult\"\n",
    "    elif (x <= 44) & (x >= 35):\n",
    "        return \"young_adult\"\n",
    "sampled_df[\"age_category\"] = sampled_df[\"age\"].map(age_category)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "target  age_category\n",
       "0       senior_adult    234\n",
       "        adult           152\n",
       "        young_adult      87\n",
       "        old              60\n",
       "1       senior_adult    193\n",
       "        adult           179\n",
       "        young_adult     107\n",
       "        old              54\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sampled_df[\"age_category\"].groupby(sampled_df[\"target\"]).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"age_category\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "From the chart above, senior_adult age category have the highest number of people with the disease "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between chest pain and the heart disease "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"chest_pain\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "People with asymptomatic chest pain tend to have the heart disease more as compared to typical angina, atypical angina, nonanginal chest pain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between resting blood pressure and the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bp_category(x):\n",
    "    if (x <= 178) & (x >=  160):\n",
    "        return \"stage_2_hypertension\"\n",
    "    elif (x <= 159) & (x >= 140):\n",
    "        return \"stage_1_hypertension\"\n",
    "    elif (x <= 139) & (x >= 120):\n",
    "        return \"elevated\"\n",
    "    elif (x <= 119) & (x >= 100):\n",
    "        return \"normal\"\n",
    "sampled_df[\"resting_bp_cat\"] = sampled_df[\"resting_bp\"].map(bp_category)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"resting_bp_cat\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    " The above chart shows that people with elevated resting bloodpressure(120 - 139) are prone to have the heart disease  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between resting bloodpressure and cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(sampled_df, x=\"resting_bp\", y=\"chol\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between chol and the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def chol_category(x):\n",
    "    if (x <= 360) & (x >=  281):\n",
    "        return \"very_high\"\n",
    "    elif (x <= 280) & (x >= 241):\n",
    "        return \"high\"\n",
    "    elif (x <= 240) & (x >= 201):\n",
    "        return \"moderate\"\n",
    "    elif (x <= 200) & (x >= 149):\n",
    "        return \"desirable\"\n",
    "sampled_df[\"chol_cat\"] = sampled_df[\"chol\"].map(chol_category)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"chol_cat\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "From our analysis, people with moderate cholesterol are the ones with the highest number of the heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between fasbt blood sugar and the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='fbs', ylabel='count'>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"fbs\", hue=\"target\")"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "People with fast blood sugar < 120mg/dL are the ones who have more of the heart disease"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Relationship between rest_ecg and the heart disease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(sampled_df, x=\"rest_ecg\", hue=\"target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "People with normal resting electrocardiographic result are more than people having ST-T wave abnormality and left ventricular hypertrophy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampled_df[\"age_category\"].replace(\n",
    "    {\"young_adult\": 0, \"adult\": 1, \"senior_adult\": 2, \"old\": 3}, inplace=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampled_df[\"resting_bp_cat\"].replace(\n",
    "    {\"normal\": 0, \"elevated\": 1, \"stage_1_hypertension\": 2, \"stage_2_hypertension\": 3}, inplace=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampled_df[\"chol_cat\"].replace(\n",
    "    {\"desirable\": 0, \"moderate\": 1, \"high\": 2, \"very_high\": 3}, inplace=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Correlation coefficient of each variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'age': -0.062343421732345944,\n",
       " 'sex': -0.047201662584264184,\n",
       " 'chest_pain': 0.3398558643731122,\n",
       " 'resting_bp': -0.030351060104592466,\n",
       " 'chol': -0.03223373319714129,\n",
       " 'fbs': -0.010851950223216871,\n",
       " 'rest_ecg': 0.18281583371274168,\n",
       " 'max_hrt': 0.09195461462291667,\n",
       " 'exang': -0.08285195578237553,\n",
       " 'oldpeak': -0.06266490131984646,\n",
       " 'slope': 0.26006191950464397,\n",
       " 'vessel': -0.09887433102477246,\n",
       " 'thal': 0.21580238634627746,\n",
       " 'age_category': -0.07547216448515631,\n",
       " 'resting_bp_cat': -0.021003743667503506,\n",
       " 'chol_cat': -0.028484698426887542}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_coef = {}\n",
    "for i in sampled_df.drop(columns=\"target\").columns.to_list():\n",
    "    corr_coef[i] = sampled_df[i].corr(sampled_df[\"target\"])\n",
    "corr_coef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for var, values in corr_coef.items():\n",
    "    plt.barh(var, values)\n",
    "    plt.title(\"Correlation Coefficient to the Target Variable\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dropping leaky variables and variables with little predicting power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = [\"chol_cat\", \"resting_bp\", \"age\", \"resting_bp_cat\", \"fbs\", \"chol\"]\n",
    "sampled_df.drop(columns=cols, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = sampled_df.drop(columns=\"target\")\n",
    "y = sampled_df[\"target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X[[\"max_hrt\", \"oldpeak\"]] = scaler.fit_transform(X[[\"max_hrt\", \"oldpeak\"]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Splitting the data into training and testing sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy on training set: 0.6995305164319249\n",
      "The accuracy on testing set: 0.6261682242990654\n"
     ]
    }
   ],
   "source": [
    "lr = LogisticRegression(random_state=42)\n",
    "lr.fit(X_train, y_train)\n",
    "lr_pred = lr.predict(X_test)\n",
    "print(\"The accuracy on training set:\", lr.score(X_train, y_train))\n",
    "print(\"The accuracy on testing set:\", accuracy_score(lr_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy on training set: 0.931924882629108\n",
      "The accuracy on testing set: 0.7149532710280374\n"
     ]
    }
   ],
   "source": [
    "rfc = RandomForestClassifier(random_state=42)\n",
    "rfc.fit(X_train, y_train)\n",
    "rfc_pred = rfc.predict(X_test)\n",
    "print(\"The accuracy on training set:\", rfc.score(X_train, y_train))\n",
    "print(\"The accuracy on testing set:\", accuracy_score(rfc_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy on training set: 0.8438967136150235\n",
      "The accuracy on testing set: 0.6822429906542056\n"
     ]
    }
   ],
   "source": [
    "gdc = GradientBoostingClassifier(random_state=42)\n",
    "gdc.fit(X_train, y_train)\n",
    "gdc_pred = gdc.predict(X_test)\n",
    "print(\"The accuracy on training set:\", gdc.score(X_train, y_train))\n",
    "print(\"The accuracy on testing set:\", accuracy_score(gdc_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy on training set: 0.931924882629108\n",
      "The accuracy on testing set: 0.719626168224299\n"
     ]
    }
   ],
   "source": [
    "dtc = DecisionTreeClassifier(random_state=42)\n",
    "dtc.fit(X_train, y_train)\n",
    "dtc_pred = dtc.predict(X_test)\n",
    "print(\"The accuracy on training set:\", dtc.score(X_train, y_train))\n",
    "print(\"The accuracy on testing set:\", accuracy_score(dtc_pred, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = {\n",
    "    \"LogisticRegression\": {\n",
    "        \"classifier\": LogisticRegression(random_state=42),\n",
    "        \"params\": {\n",
    "            \"penalty\": [\"l1\", \"l2\"],\n",
    "            \"C\": [0.001, 0.01, 0.1, 1, 10, 100],\n",
    "            \"solver\": [\"liblinear\", \"saga\"]\n",
    "        }\n",
    "    },\n",
    "    \"RandomForestClassifier\": {\n",
    "        \"classifier\": RandomForestClassifier(random_state=42),\n",
    "        \"params\": {\n",
    "            \"n_estimators\": [10, 50, 100],\n",
    "            \"max_depth\": [10, 20, 30],\n",
    "            \"min_samples_leaf\": [1, 2, 4],\n",
    "            \"min_samples_split\": [2, 5, 10]\n",
    "        }\n",
    "    },\n",
    "    \"GradientBoostingClassifier\": {\n",
    "        \"classifier\": GradientBoostingClassifier(random_state=42),\n",
    "        \"params\": {\n",
    "            \"n_estimators\": [50, 100, 150],\n",
    "            \"max_depth\": [3, 5, 7],\n",
    "            \"learning_rate\": [0.01, 0.1, 0.5],\n",
    "            \"min_samples_split\": [2, 5, 10]\n",
    "        }\n",
    "    },\n",
    "    \"DecisionTreeClassifier\": {\n",
    "        \"classifier\": DecisionTreeClassifier(random_state=42),\n",
    "        \"params\": {\n",
    "            \"criterion\": [\"gini\", \"entropy\"],\n",
    "            \"splitter\": [\"best\", \"random\"],\n",
    "            \"max_depth\": [10, 20, 30],\n",
    "            \"min_samples_leaf\": [1, 2, 4],\n",
    "            \"min_samples_split\": [2, 5, 10]\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using GridSearchCv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 24 candidates, totalling 120 fits\n",
      "[CV 1/5; 1/24] START C=0.001, penalty=l1, solver=liblinear......................\n",
      "[CV 1/5; 1/24] END C=0.001, penalty=l1, solver=liblinear;, score=0.500 total time=   0.0s\n",
      "[CV 2/5; 1/24] START C=0.001, penalty=l1, solver=liblinear......................\n",
      "[CV 2/5; 1/24] END C=0.001, penalty=l1, solver=liblinear;, score=0.500 total time=   0.0s\n",
      "[CV 3/5; 1/24] START C=0.001, penalty=l1, solver=liblinear......................\n",
      "[CV 3/5; 1/24] END C=0.001, penalty=l1, solver=liblinear;, score=0.500 total time=   0.0s\n",
      "[CV 4/5; 1/24] START C=0.001, penalty=l1, solver=liblinear......................\n",
      "[CV 4/5; 1/24] END C=0.001, penalty=l1, solver=liblinear;, score=0.500 total time=   0.0s\n",
      "[CV 5/5; 1/24] START C=0.001, penalty=l1, solver=liblinear......................\n",
      "[CV 5/5; 1/24] END C=0.001, penalty=l1, solver=liblinear;, score=0.500 total time=   0.0s\n",
      "[CV 1/5; 2/24] START C=0.001, penalty=l1, solver=saga...........................\n",
      "[CV 1/5; 2/24] END C=0.001, penalty=l1, solver=saga;, score=0.500 total time=   0.0s\n",
      "[CV 2/5; 2/24] START C=0.001, penalty=l1, solver=saga...........................\n",
      "[CV 2/5; 2/24] END C=0.001, penalty=l1, solver=saga;, score=0.500 total time=   0.0s\n",
      "[CV 3/5; 2/24] START C=0.001, penalty=l1, solver=saga...........................\n",
      "[CV 3/5; 2/24] END C=0.001, penalty=l1, solver=saga;, score=0.500 total time=   0.0s\n",
      "[CV 4/5; 2/24] START C=0.001, penalty=l1, solver=saga...........................\n",
      "[CV 4/5; 2/24] END C=0.001, penalty=l1, solver=saga;, score=0.500 total time=   0.0s\n",
      "[CV 5/5; 2/24] START C=0.001, penalty=l1, solver=saga...........................\n",
      "[CV 5/5; 2/24] END C=0.001, penalty=l1, solver=saga;, score=0.500 total time=   0.0s\n",
      "[CV 1/5; 3/24] START C=0.001, penalty=l2, solver=liblinear......................\n",
      "[CV 1/5; 3/24] END C=0.001, penalty=l2, solver=liblinear;, score=0.700 total time=   0.0s\n",
      "[CV 2/5; 3/24] START C=0.001, penalty=l2, solver=liblinear......................\n",
      "[CV 2/5; 3/24] END C=0.001, penalty=l2, solver=liblinear;, score=0.652 total time=   0.0s\n",
      "[CV 3/5; 3/24] START C=0.001, penalty=l2, solver=liblinear......................\n",
      "[CV 3/5; 3/24] END C=0.001, penalty=l2, solver=liblinear;, score=0.671 total time=   0.0s\n",
      "[CV 4/5; 3/24] START C=0.001, penalty=l2, solver=liblinear......................\n",
      "[CV 4/5; 3/24] END C=0.001, penalty=l2, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 5/5; 3/24] START C=0.001, penalty=l2, solver=liblinear......................\n",
      "[CV 5/5; 3/24] END C=0.001, penalty=l2, solver=liblinear;, score=0.789 total time=   0.0s\n",
      "[CV 1/5; 4/24] START C=0.001, penalty=l2, solver=saga...........................\n",
      "[CV 1/5; 4/24] END C=0.001, penalty=l2, solver=saga;, score=0.685 total time=   0.0s\n",
      "[CV 2/5; 4/24] START C=0.001, penalty=l2, solver=saga...........................\n",
      "[CV 2/5; 4/24] END C=0.001, penalty=l2, solver=saga;, score=0.682 total time=   0.0s\n",
      "[CV 3/5; 4/24] START C=0.001, penalty=l2, solver=saga...........................\n",
      "[CV 3/5; 4/24] END C=0.001, penalty=l2, solver=saga;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 4/24] START C=0.001, penalty=l2, solver=saga...........................\n",
      "[CV 4/5; 4/24] END C=0.001, penalty=l2, solver=saga;, score=0.716 total time=   0.0s\n",
      "[CV 5/5; 4/24] START C=0.001, penalty=l2, solver=saga...........................\n",
      "[CV 5/5; 4/24] END C=0.001, penalty=l2, solver=saga;, score=0.801 total time=   0.0s\n",
      "[CV 1/5; 5/24] START C=0.01, penalty=l1, solver=liblinear.......................\n",
      "[CV 1/5; 5/24] END C=0.01, penalty=l1, solver=liblinear;, score=0.660 total time=   0.0s\n",
      "[CV 2/5; 5/24] START C=0.01, penalty=l1, solver=liblinear.......................\n",
      "[CV 2/5; 5/24] END C=0.01, penalty=l1, solver=liblinear;, score=0.669 total time=   0.0s\n",
      "[CV 3/5; 5/24] START C=0.01, penalty=l1, solver=liblinear.......................\n",
      "[CV 3/5; 5/24] END C=0.01, penalty=l1, solver=liblinear;, score=0.687 total time=   0.0s\n",
      "[CV 4/5; 5/24] START C=0.01, penalty=l1, solver=liblinear.......................\n",
      "[CV 4/5; 5/24] END C=0.01, penalty=l1, solver=liblinear;, score=0.697 total time=   0.0s\n",
      "[CV 5/5; 5/24] START C=0.01, penalty=l1, solver=liblinear.......................\n",
      "[CV 5/5; 5/24] END C=0.01, penalty=l1, solver=liblinear;, score=0.800 total time=   0.0s\n",
      "[CV 1/5; 6/24] START C=0.01, penalty=l1, solver=saga............................\n",
      "[CV 1/5; 6/24] END C=0.01, penalty=l1, solver=saga;, score=0.660 total time=   0.0s\n",
      "[CV 2/5; 6/24] START C=0.01, penalty=l1, solver=saga............................\n",
      "[CV 2/5; 6/24] END C=0.01, penalty=l1, solver=saga;, score=0.669 total time=   0.0s\n",
      "[CV 3/5; 6/24] START C=0.01, penalty=l1, solver=saga............................\n",
      "[CV 3/5; 6/24] END C=0.01, penalty=l1, solver=saga;, score=0.687 total time=   0.0s\n",
      "[CV 4/5; 6/24] START C=0.01, penalty=l1, solver=saga............................\n",
      "[CV 4/5; 6/24] END C=0.01, penalty=l1, solver=saga;, score=0.697 total time=   0.0s\n",
      "[CV 5/5; 6/24] START C=0.01, penalty=l1, solver=saga............................\n",
      "[CV 5/5; 6/24] END C=0.01, penalty=l1, solver=saga;, score=0.800 total time=   0.0s\n",
      "[CV 1/5; 7/24] START C=0.01, penalty=l2, solver=liblinear.......................\n",
      "[CV 1/5; 7/24] END C=0.01, penalty=l2, solver=liblinear;, score=0.706 total time=   0.0s\n",
      "[CV 2/5; 7/24] START C=0.01, penalty=l2, solver=liblinear.......................\n",
      "[CV 2/5; 7/24] END C=0.01, penalty=l2, solver=liblinear;, score=0.660 total time=   0.0s\n",
      "[CV 3/5; 7/24] START C=0.01, penalty=l2, solver=liblinear.......................\n",
      "[CV 3/5; 7/24] END C=0.01, penalty=l2, solver=liblinear;, score=0.667 total time=   0.0s\n",
      "[CV 4/5; 7/24] START C=0.01, penalty=l2, solver=liblinear.......................\n",
      "[CV 4/5; 7/24] END C=0.01, penalty=l2, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 5/5; 7/24] START C=0.01, penalty=l2, solver=liblinear.......................\n",
      "[CV 5/5; 7/24] END C=0.01, penalty=l2, solver=liblinear;, score=0.794 total time=   0.0s\n",
      "[CV 1/5; 8/24] START C=0.01, penalty=l2, solver=saga............................\n",
      "[CV 1/5; 8/24] END C=0.01, penalty=l2, solver=saga;, score=0.713 total time=   0.0s\n",
      "[CV 2/5; 8/24] START C=0.01, penalty=l2, solver=saga............................\n",
      "[CV 2/5; 8/24] END C=0.01, penalty=l2, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 3/5; 8/24] START C=0.01, penalty=l2, solver=saga............................\n",
      "[CV 3/5; 8/24] END C=0.01, penalty=l2, solver=saga;, score=0.709 total time=   0.0s\n",
      "[CV 4/5; 8/24] START C=0.01, penalty=l2, solver=saga............................\n",
      "[CV 4/5; 8/24] END C=0.01, penalty=l2, solver=saga;, score=0.715 total time=   0.0s\n",
      "[CV 5/5; 8/24] START C=0.01, penalty=l2, solver=saga............................\n",
      "[CV 5/5; 8/24] END C=0.01, penalty=l2, solver=saga;, score=0.816 total time=   0.0s\n",
      "[CV 1/5; 9/24] START C=0.1, penalty=l1, solver=liblinear........................\n",
      "[CV 1/5; 9/24] END C=0.1, penalty=l1, solver=liblinear;, score=0.712 total time=   0.0s\n",
      "[CV 2/5; 9/24] START C=0.1, penalty=l1, solver=liblinear........................\n",
      "[CV 2/5; 9/24] END C=0.1, penalty=l1, solver=liblinear;, score=0.697 total time=   0.0s\n",
      "[CV 3/5; 9/24] START C=0.1, penalty=l1, solver=liblinear........................\n",
      "[CV 3/5; 9/24] END C=0.1, penalty=l1, solver=liblinear;, score=0.698 total time=   0.0s\n",
      "[CV 4/5; 9/24] START C=0.1, penalty=l1, solver=liblinear........................\n",
      "[CV 4/5; 9/24] END C=0.1, penalty=l1, solver=liblinear;, score=0.709 total time=   0.0s\n",
      "[CV 5/5; 9/24] START C=0.1, penalty=l1, solver=liblinear........................\n",
      "[CV 5/5; 9/24] END C=0.1, penalty=l1, solver=liblinear;, score=0.818 total time=   0.0s\n",
      "[CV 1/5; 10/24] START C=0.1, penalty=l1, solver=saga............................\n",
      "[CV 1/5; 10/24] END C=0.1, penalty=l1, solver=saga;, score=0.716 total time=   0.0s\n",
      "[CV 2/5; 10/24] START C=0.1, penalty=l1, solver=saga............................\n",
      "[CV 2/5; 10/24] END C=0.1, penalty=l1, solver=saga;, score=0.730 total time=   0.0s\n",
      "[CV 3/5; 10/24] START C=0.1, penalty=l1, solver=saga............................\n",
      "[CV 3/5; 10/24] END C=0.1, penalty=l1, solver=saga;, score=0.716 total time=   0.0s\n",
      "[CV 4/5; 10/24] START C=0.1, penalty=l1, solver=saga............................\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5; 10/24] END C=0.1, penalty=l1, solver=saga;, score=0.701 total time=   0.0s\n",
      "[CV 5/5; 10/24] START C=0.1, penalty=l1, solver=saga............................\n",
      "[CV 5/5; 10/24] END C=0.1, penalty=l1, solver=saga;, score=0.826 total time=   0.0s\n",
      "[CV 1/5; 11/24] START C=0.1, penalty=l2, solver=liblinear.......................\n",
      "[CV 1/5; 11/24] END C=0.1, penalty=l2, solver=liblinear;, score=0.730 total time=   0.0s\n",
      "[CV 2/5; 11/24] START C=0.1, penalty=l2, solver=liblinear.......................\n",
      "[CV 2/5; 11/24] END C=0.1, penalty=l2, solver=liblinear;, score=0.695 total time=   0.0s\n",
      "[CV 3/5; 11/24] START C=0.1, penalty=l2, solver=liblinear.......................\n",
      "[CV 3/5; 11/24] END C=0.1, penalty=l2, solver=liblinear;, score=0.690 total time=   0.0s\n",
      "[CV 4/5; 11/24] START C=0.1, penalty=l2, solver=liblinear.......................\n",
      "[CV 4/5; 11/24] END C=0.1, penalty=l2, solver=liblinear;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 11/24] START C=0.1, penalty=l2, solver=liblinear.......................\n",
      "[CV 5/5; 11/24] END C=0.1, penalty=l2, solver=liblinear;, score=0.804 total time=   0.0s\n",
      "[CV 1/5; 12/24] START C=0.1, penalty=l2, solver=saga............................\n",
      "[CV 1/5; 12/24] END C=0.1, penalty=l2, solver=saga;, score=0.733 total time=   0.0s\n",
      "[CV 2/5; 12/24] START C=0.1, penalty=l2, solver=saga............................\n",
      "[CV 2/5; 12/24] END C=0.1, penalty=l2, solver=saga;, score=0.717 total time=   0.0s\n",
      "[CV 3/5; 12/24] START C=0.1, penalty=l2, solver=saga............................\n",
      "[CV 3/5; 12/24] END C=0.1, penalty=l2, solver=saga;, score=0.709 total time=   0.0s\n",
      "[CV 4/5; 12/24] START C=0.1, penalty=l2, solver=saga............................\n",
      "[CV 4/5; 12/24] END C=0.1, penalty=l2, solver=saga;, score=0.704 total time=   0.0s\n",
      "[CV 5/5; 12/24] START C=0.1, penalty=l2, solver=saga............................\n",
      "[CV 5/5; 12/24] END C=0.1, penalty=l2, solver=saga;, score=0.815 total time=   0.0s\n",
      "[CV 1/5; 13/24] START C=1, penalty=l1, solver=liblinear.........................\n",
      "[CV 1/5; 13/24] END C=1, penalty=l1, solver=liblinear;, score=0.735 total time=   0.0s\n",
      "[CV 2/5; 13/24] START C=1, penalty=l1, solver=liblinear.........................\n",
      "[CV 2/5; 13/24] END C=1, penalty=l1, solver=liblinear;, score=0.718 total time=   0.0s\n",
      "[CV 3/5; 13/24] START C=1, penalty=l1, solver=liblinear.........................\n",
      "[CV 3/5; 13/24] END C=1, penalty=l1, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 13/24] START C=1, penalty=l1, solver=liblinear.........................\n",
      "[CV 4/5; 13/24] END C=1, penalty=l1, solver=liblinear;, score=0.698 total time=   0.0s\n",
      "[CV 5/5; 13/24] START C=1, penalty=l1, solver=liblinear.........................\n",
      "[CV 5/5; 13/24] END C=1, penalty=l1, solver=liblinear;, score=0.811 total time=   0.0s\n",
      "[CV 1/5; 14/24] START C=1, penalty=l1, solver=saga..............................\n",
      "[CV 1/5; 14/24] END C=1, penalty=l1, solver=saga;, score=0.733 total time=   0.0s\n",
      "[CV 2/5; 14/24] START C=1, penalty=l1, solver=saga..............................\n",
      "[CV 2/5; 14/24] END C=1, penalty=l1, solver=saga;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 14/24] START C=1, penalty=l1, solver=saga..............................\n",
      "[CV 3/5; 14/24] END C=1, penalty=l1, solver=saga;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 14/24] START C=1, penalty=l1, solver=saga..............................\n",
      "[CV 4/5; 14/24] END C=1, penalty=l1, solver=saga;, score=0.698 total time=   0.0s\n",
      "[CV 5/5; 14/24] START C=1, penalty=l1, solver=saga..............................\n",
      "[CV 5/5; 14/24] END C=1, penalty=l1, solver=saga;, score=0.812 total time=   0.0s\n",
      "[CV 1/5; 15/24] START C=1, penalty=l2, solver=liblinear.........................\n",
      "[CV 1/5; 15/24] END C=1, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 2/5; 15/24] START C=1, penalty=l2, solver=liblinear.........................\n",
      "[CV 2/5; 15/24] END C=1, penalty=l2, solver=liblinear;, score=0.716 total time=   0.0s\n",
      "[CV 3/5; 15/24] START C=1, penalty=l2, solver=liblinear.........................\n",
      "[CV 3/5; 15/24] END C=1, penalty=l2, solver=liblinear;, score=0.708 total time=   0.0s\n",
      "[CV 4/5; 15/24] START C=1, penalty=l2, solver=liblinear.........................\n",
      "[CV 4/5; 15/24] END C=1, penalty=l2, solver=liblinear;, score=0.702 total time=   0.0s\n",
      "[CV 5/5; 15/24] START C=1, penalty=l2, solver=liblinear.........................\n",
      "[CV 5/5; 15/24] END C=1, penalty=l2, solver=liblinear;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 16/24] START C=1, penalty=l2, solver=saga..............................\n",
      "[CV 1/5; 16/24] END C=1, penalty=l2, solver=saga;, score=0.737 total time=   0.0s\n",
      "[CV 2/5; 16/24] START C=1, penalty=l2, solver=saga..............................\n",
      "[CV 2/5; 16/24] END C=1, penalty=l2, solver=saga;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 16/24] START C=1, penalty=l2, solver=saga..............................\n",
      "[CV 3/5; 16/24] END C=1, penalty=l2, solver=saga;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 16/24] START C=1, penalty=l2, solver=saga..............................\n",
      "[CV 4/5; 16/24] END C=1, penalty=l2, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 16/24] START C=1, penalty=l2, solver=saga..............................\n",
      "[CV 5/5; 16/24] END C=1, penalty=l2, solver=saga;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 17/24] START C=10, penalty=l1, solver=liblinear........................\n",
      "[CV 1/5; 17/24] END C=10, penalty=l1, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 2/5; 17/24] START C=10, penalty=l1, solver=liblinear........................\n",
      "[CV 2/5; 17/24] END C=10, penalty=l1, solver=liblinear;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 17/24] START C=10, penalty=l1, solver=liblinear........................\n",
      "[CV 3/5; 17/24] END C=10, penalty=l1, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 17/24] START C=10, penalty=l1, solver=liblinear........................\n",
      "[CV 4/5; 17/24] END C=10, penalty=l1, solver=liblinear;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 17/24] START C=10, penalty=l1, solver=liblinear........................\n",
      "[CV 5/5; 17/24] END C=10, penalty=l1, solver=liblinear;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 18/24] START C=10, penalty=l1, solver=saga.............................\n",
      "[CV 1/5; 18/24] END C=10, penalty=l1, solver=saga;, score=0.737 total time=   0.0s\n",
      "[CV 2/5; 18/24] START C=10, penalty=l1, solver=saga.............................\n",
      "[CV 2/5; 18/24] END C=10, penalty=l1, solver=saga;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 18/24] START C=10, penalty=l1, solver=saga.............................\n",
      "[CV 3/5; 18/24] END C=10, penalty=l1, solver=saga;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 18/24] START C=10, penalty=l1, solver=saga.............................\n",
      "[CV 4/5; 18/24] END C=10, penalty=l1, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 18/24] START C=10, penalty=l1, solver=saga.............................\n",
      "[CV 5/5; 18/24] END C=10, penalty=l1, solver=saga;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 19/24] START C=10, penalty=l2, solver=liblinear........................\n",
      "[CV 1/5; 19/24] END C=10, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 2/5; 19/24] START C=10, penalty=l2, solver=liblinear........................\n",
      "[CV 2/5; 19/24] END C=10, penalty=l2, solver=liblinear;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 19/24] START C=10, penalty=l2, solver=liblinear........................\n",
      "[CV 3/5; 19/24] END C=10, penalty=l2, solver=liblinear;, score=0.710 total time=   0.0s\n",
      "[CV 4/5; 19/24] START C=10, penalty=l2, solver=liblinear........................\n",
      "[CV 4/5; 19/24] END C=10, penalty=l2, solver=liblinear;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 19/24] START C=10, penalty=l2, solver=liblinear........................\n",
      "[CV 5/5; 19/24] END C=10, penalty=l2, solver=liblinear;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 20/24] START C=10, penalty=l2, solver=saga.............................\n",
      "[CV 1/5; 20/24] END C=10, penalty=l2, solver=saga;, score=0.738 total time=   0.0s\n",
      "[CV 2/5; 20/24] START C=10, penalty=l2, solver=saga.............................\n",
      "[CV 2/5; 20/24] END C=10, penalty=l2, solver=saga;, score=0.722 total time=   0.0s\n",
      "[CV 3/5; 20/24] START C=10, penalty=l2, solver=saga.............................\n",
      "[CV 3/5; 20/24] END C=10, penalty=l2, solver=saga;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 20/24] START C=10, penalty=l2, solver=saga.............................\n",
      "[CV 4/5; 20/24] END C=10, penalty=l2, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 20/24] START C=10, penalty=l2, solver=saga.............................\n",
      "[CV 5/5; 20/24] END C=10, penalty=l2, solver=saga;, score=0.809 total time=   0.0s\n",
      "[CV 1/5; 21/24] START C=100, penalty=l1, solver=liblinear.......................\n",
      "[CV 1/5; 21/24] END C=100, penalty=l1, solver=liblinear;, score=0.738 total time=   0.0s\n",
      "[CV 2/5; 21/24] START C=100, penalty=l1, solver=liblinear.......................\n",
      "[CV 2/5; 21/24] END C=100, penalty=l1, solver=liblinear;, score=0.722 total time=   0.0s\n",
      "[CV 3/5; 21/24] START C=100, penalty=l1, solver=liblinear.......................\n",
      "[CV 3/5; 21/24] END C=100, penalty=l1, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 21/24] START C=100, penalty=l1, solver=liblinear.......................\n",
      "[CV 4/5; 21/24] END C=100, penalty=l1, solver=liblinear;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 21/24] START C=100, penalty=l1, solver=liblinear.......................\n",
      "[CV 5/5; 21/24] END C=100, penalty=l1, solver=liblinear;, score=0.808 total time=   0.0s\n",
      "[CV 1/5; 22/24] START C=100, penalty=l1, solver=saga............................\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 22/24] END C=100, penalty=l1, solver=saga;, score=0.739 total time=   0.0s\n",
      "[CV 2/5; 22/24] START C=100, penalty=l1, solver=saga............................\n",
      "[CV 2/5; 22/24] END C=100, penalty=l1, solver=saga;, score=0.722 total time=   0.0s\n",
      "[CV 3/5; 22/24] START C=100, penalty=l1, solver=saga............................\n",
      "[CV 3/5; 22/24] END C=100, penalty=l1, solver=saga;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 22/24] START C=100, penalty=l1, solver=saga............................\n",
      "[CV 4/5; 22/24] END C=100, penalty=l1, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 22/24] START C=100, penalty=l1, solver=saga............................\n",
      "[CV 5/5; 22/24] END C=100, penalty=l1, solver=saga;, score=0.808 total time=   0.0s\n",
      "[CV 1/5; 23/24] START C=100, penalty=l2, solver=liblinear.......................\n",
      "[CV 1/5; 23/24] END C=100, penalty=l2, solver=liblinear;, score=0.738 total time=   0.0s\n",
      "[CV 2/5; 23/24] START C=100, penalty=l2, solver=liblinear.......................\n",
      "[CV 2/5; 23/24] END C=100, penalty=l2, solver=liblinear;, score=0.721 total time=   0.0s\n",
      "[CV 3/5; 23/24] START C=100, penalty=l2, solver=liblinear.......................\n",
      "[CV 3/5; 23/24] END C=100, penalty=l2, solver=liblinear;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 23/24] START C=100, penalty=l2, solver=liblinear.......................\n",
      "[CV 4/5; 23/24] END C=100, penalty=l2, solver=liblinear;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 23/24] START C=100, penalty=l2, solver=liblinear.......................\n",
      "[CV 5/5; 23/24] END C=100, penalty=l2, solver=liblinear;, score=0.808 total time=   0.0s\n",
      "[CV 1/5; 24/24] START C=100, penalty=l2, solver=saga............................\n",
      "[CV 1/5; 24/24] END C=100, penalty=l2, solver=saga;, score=0.739 total time=   0.0s\n",
      "[CV 2/5; 24/24] START C=100, penalty=l2, solver=saga............................\n",
      "[CV 2/5; 24/24] END C=100, penalty=l2, solver=saga;, score=0.722 total time=   0.0s\n",
      "[CV 3/5; 24/24] START C=100, penalty=l2, solver=saga............................\n",
      "[CV 3/5; 24/24] END C=100, penalty=l2, solver=saga;, score=0.711 total time=   0.0s\n",
      "[CV 4/5; 24/24] START C=100, penalty=l2, solver=saga............................\n",
      "[CV 4/5; 24/24] END C=100, penalty=l2, solver=saga;, score=0.699 total time=   0.0s\n",
      "[CV 5/5; 24/24] START C=100, penalty=l2, solver=saga............................\n",
      "[CV 5/5; 24/24] END C=100, penalty=l2, solver=saga;, score=0.808 total time=   0.0s\n",
      "Fitting 5 folds for each of 81 candidates, totalling 405 fits\n",
      "[CV 1/5; 1/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 1/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.847 total time=   0.0s\n",
      "[CV 2/5; 1/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 1/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.849 total time=   0.0s\n",
      "[CV 3/5; 1/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 1/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.835 total time=   0.0s\n",
      "[CV 4/5; 1/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 1/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.819 total time=   0.0s\n",
      "[CV 5/5; 1/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 1/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.838 total time=   0.0s\n",
      "[CV 1/5; 2/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 2/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.881 total time=   0.1s\n",
      "[CV 2/5; 2/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 2/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.858 total time=   0.1s\n",
      "[CV 3/5; 2/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 2/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.836 total time=   0.0s\n",
      "[CV 4/5; 2/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 2/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.821 total time=   0.0s\n",
      "[CV 5/5; 2/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 2/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.863 total time=   0.0s\n",
      "[CV 1/5; 3/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 3/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.889 total time=   0.2s\n",
      "[CV 2/5; 3/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 3/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.866 total time=   0.2s\n",
      "[CV 3/5; 3/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 3/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.837 total time=   0.2s\n",
      "[CV 4/5; 3/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 3/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 5/5; 3/81] START max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 3/81] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.864 total time=   0.2s\n",
      "[CV 1/5; 4/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 4/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.870 total time=   0.0s\n",
      "[CV 2/5; 4/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 4/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 4/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 4/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.819 total time=   0.0s\n",
      "[CV 4/5; 4/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 4/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.805 total time=   0.0s\n",
      "[CV 5/5; 4/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 4/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.864 total time=   0.0s\n",
      "[CV 1/5; 5/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 5/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.884 total time=   0.0s\n",
      "[CV 2/5; 5/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 5/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.854 total time=   0.0s\n",
      "[CV 3/5; 5/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 5/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.830 total time=   0.0s\n",
      "[CV 4/5; 5/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 5/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.811 total time=   0.1s\n",
      "[CV 5/5; 5/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 5/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.870 total time=   0.0s\n",
      "[CV 1/5; 6/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 6/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.884 total time=   0.2s\n",
      "[CV 2/5; 6/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 6/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.855 total time=   0.2s\n",
      "[CV 3/5; 6/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 6/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.830 total time=   0.2s\n",
      "[CV 4/5; 6/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 6/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.806 total time=   0.2s\n",
      "[CV 5/5; 6/81] START max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 6/81] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.865 total time=   0.2s\n",
      "[CV 1/5; 7/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 7/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.865 total time=   0.0s\n",
      "[CV 2/5; 7/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 7/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.851 total time=   0.0s\n",
      "[CV 3/5; 7/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 7/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.796 total time=   0.0s\n",
      "[CV 4/5; 7/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 7/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.783 total time=   0.0s\n",
      "[CV 5/5; 7/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 7/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.846 total time=   0.0s\n",
      "[CV 1/5; 8/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 8/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.886 total time=   0.1s\n",
      "[CV 2/5; 8/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 8/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.862 total time=   0.0s\n",
      "[CV 3/5; 8/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 8/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.824 total time=   0.1s\n",
      "[CV 4/5; 8/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 8/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.785 total time=   0.1s\n",
      "[CV 5/5; 8/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 8/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.854 total time=   0.0s\n",
      "[CV 1/5; 9/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 9/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.883 total time=   0.2s\n",
      "[CV 2/5; 9/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 9/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.862 total time=   0.6s\n",
      "[CV 3/5; 9/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 9/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.823 total time=   0.3s\n",
      "[CV 4/5; 9/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 9/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.788 total time=   0.3s\n",
      "[CV 5/5; 9/81] START max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 9/81] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.855 total time=   0.2s\n",
      "[CV 1/5; 10/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 10/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.844 total time=   0.0s\n",
      "[CV 2/5; 10/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 10/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 3/5; 10/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 10/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.827 total time=   0.0s\n",
      "[CV 4/5; 10/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 10/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.794 total time=   0.0s\n",
      "[CV 5/5; 10/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 10/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.842 total time=   0.0s\n",
      "[CV 1/5; 11/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 11/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.877 total time=   0.1s\n",
      "[CV 2/5; 11/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 11/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.862 total time=   0.2s\n",
      "[CV 3/5; 11/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 11/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.820 total time=   0.1s\n",
      "[CV 4/5; 11/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 11/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.806 total time=   0.0s\n",
      "[CV 5/5; 11/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 11/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.860 total time=   0.0s\n",
      "[CV 1/5; 12/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 12/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 12/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 12/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.868 total time=   0.2s\n",
      "[CV 3/5; 12/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 12/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.825 total time=   0.2s\n",
      "[CV 4/5; 12/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 12/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.801 total time=   0.2s\n",
      "[CV 5/5; 12/81] START max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 12/81] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 1/5; 13/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 13/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.865 total time=   0.0s\n",
      "[CV 2/5; 13/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 13/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.875 total time=   0.0s\n",
      "[CV 3/5; 13/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 13/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.798 total time=   0.0s\n",
      "[CV 4/5; 13/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 13/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.814 total time=   0.0s\n",
      "[CV 5/5; 13/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 13/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.847 total time=   0.0s\n",
      "[CV 1/5; 14/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 14/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.876 total time=   0.0s\n",
      "[CV 2/5; 14/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 14/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.869 total time=   0.0s\n",
      "[CV 3/5; 14/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 14/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.826 total time=   0.0s\n",
      "[CV 4/5; 14/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 14/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.804 total time=   0.1s\n",
      "[CV 5/5; 14/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 14/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.868 total time=   0.1s\n",
      "[CV 1/5; 15/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 15/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.879 total time=   0.2s\n",
      "[CV 2/5; 15/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 15/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.870 total time=   0.3s\n",
      "[CV 3/5; 15/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 15/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.824 total time=   0.2s\n",
      "[CV 4/5; 15/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 15/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.798 total time=   0.3s\n",
      "[CV 5/5; 15/81] START max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 15/81] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 1/5; 16/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 16/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.859 total time=   0.0s\n",
      "[CV 2/5; 16/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 16/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.879 total time=   0.0s\n",
      "[CV 3/5; 16/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 16/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.814 total time=   0.0s\n",
      "[CV 4/5; 16/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 16/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.792 total time=   0.0s\n",
      "[CV 5/5; 16/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 16/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.844 total time=   0.0s\n",
      "[CV 1/5; 17/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 17/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.870 total time=   0.1s\n",
      "[CV 2/5; 17/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 17/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.861 total time=   0.1s\n",
      "[CV 3/5; 17/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 17/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.824 total time=   0.1s\n",
      "[CV 4/5; 17/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 17/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.795 total time=   0.1s\n",
      "[CV 5/5; 17/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 17/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.859 total time=   0.0s\n",
      "[CV 1/5; 18/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 18/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.879 total time=   0.1s\n",
      "[CV 2/5; 18/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 18/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.864 total time=   0.2s\n",
      "[CV 3/5; 18/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 18/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.820 total time=   0.2s\n",
      "[CV 4/5; 18/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 18/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.787 total time=   0.3s\n",
      "[CV 5/5; 18/81] START max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 18/81] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 1/5; 19/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 19/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 2/5; 19/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 19/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 19/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 19/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.799 total time=   0.0s\n",
      "[CV 4/5; 19/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 19/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.776 total time=   0.0s\n",
      "[CV 5/5; 19/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 19/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.838 total time=   0.0s\n",
      "[CV 1/5; 20/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 20/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.871 total time=   0.1s\n",
      "[CV 2/5; 20/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 20/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.855 total time=   0.2s\n",
      "[CV 3/5; 20/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 20/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.821 total time=   0.1s\n",
      "[CV 4/5; 20/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 20/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.785 total time=   0.0s\n",
      "[CV 5/5; 20/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 20/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.865 total time=   0.0s\n",
      "[CV 1/5; 21/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 21/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 21/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 21/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 21/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 21/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.815 total time=   0.3s\n",
      "[CV 4/5; 21/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5; 21/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.789 total time=   0.2s\n",
      "[CV 5/5; 21/81] START max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 21/81] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.865 total time=   0.2s\n",
      "[CV 1/5; 22/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 22/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 2/5; 22/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 22/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 22/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 22/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.799 total time=   0.0s\n",
      "[CV 4/5; 22/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 22/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.776 total time=   0.0s\n",
      "[CV 5/5; 22/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 22/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.838 total time=   0.0s\n",
      "[CV 1/5; 23/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 23/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.871 total time=   0.0s\n",
      "[CV 2/5; 23/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 23/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.855 total time=   0.0s\n",
      "[CV 3/5; 23/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 23/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.821 total time=   0.0s\n",
      "[CV 4/5; 23/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 23/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.785 total time=   0.0s\n",
      "[CV 5/5; 23/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 23/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.865 total time=   0.0s\n",
      "[CV 1/5; 24/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 24/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 24/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 24/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 24/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 24/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 4/5; 24/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 24/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.789 total time=   0.2s\n",
      "[CV 5/5; 24/81] START max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 24/81] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.865 total time=   0.2s\n",
      "[CV 1/5; 25/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 25/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 2/5; 25/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 25/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.839 total time=   0.0s\n",
      "[CV 3/5; 25/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 25/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 25/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 25/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.784 total time=   0.0s\n",
      "[CV 5/5; 25/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 25/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.833 total time=   0.0s\n",
      "[CV 1/5; 26/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 26/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.874 total time=   0.0s\n",
      "[CV 2/5; 26/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 26/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.856 total time=   0.0s\n",
      "[CV 3/5; 26/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 26/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.812 total time=   0.0s\n",
      "[CV 4/5; 26/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 26/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.783 total time=   0.0s\n",
      "[CV 5/5; 26/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 26/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.851 total time=   0.0s\n",
      "[CV 1/5; 27/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 27/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 27/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 27/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 3/5; 27/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 27/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.812 total time=   0.1s\n",
      "[CV 4/5; 27/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 27/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.787 total time=   0.2s\n",
      "[CV 5/5; 27/81] START max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 27/81] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.850 total time=   0.2s\n",
      "[CV 1/5; 28/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 28/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.847 total time=   0.0s\n",
      "[CV 2/5; 28/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 28/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.836 total time=   0.0s\n",
      "[CV 3/5; 28/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 28/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.790 total time=   0.0s\n",
      "[CV 4/5; 28/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 28/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.812 total time=   0.0s\n",
      "[CV 5/5; 28/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 28/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.812 total time=   0.0s\n",
      "[CV 1/5; 29/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 29/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.858 total time=   0.1s\n",
      "[CV 2/5; 29/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 29/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.839 total time=   0.2s\n",
      "[CV 3/5; 29/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 29/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.823 total time=   0.1s\n",
      "[CV 4/5; 29/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 29/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.824 total time=   0.1s\n",
      "[CV 5/5; 29/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 29/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.841 total time=   0.2s\n",
      "[CV 1/5; 30/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 30/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 2/5; 30/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 30/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.840 total time=   0.2s\n",
      "[CV 3/5; 30/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 30/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 30/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 30/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.816 total time=   0.2s\n",
      "[CV 5/5; 30/81] START max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 30/81] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.840 total time=   0.2s\n",
      "[CV 1/5; 31/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 31/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.836 total time=   0.0s\n",
      "[CV 2/5; 31/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 31/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.850 total time=   0.0s\n",
      "[CV 3/5; 31/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 31/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.824 total time=   0.0s\n",
      "[CV 4/5; 31/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 31/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.795 total time=   0.0s\n",
      "[CV 5/5; 31/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 31/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.840 total time=   0.0s\n",
      "[CV 1/5; 32/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 32/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.871 total time=   0.1s\n",
      "[CV 2/5; 32/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 32/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.853 total time=   0.1s\n",
      "[CV 3/5; 32/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 32/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.830 total time=   0.0s\n",
      "[CV 4/5; 32/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 32/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.812 total time=   0.0s\n",
      "[CV 5/5; 32/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 32/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.855 total time=   0.2s\n",
      "[CV 1/5; 33/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 33/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.875 total time=   0.3s\n",
      "[CV 2/5; 33/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 33/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.858 total time=   0.2s\n",
      "[CV 3/5; 33/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 33/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.829 total time=   0.2s\n",
      "[CV 4/5; 33/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 33/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.808 total time=   0.2s\n",
      "[CV 5/5; 33/81] START max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 33/81] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.852 total time=   0.2s\n",
      "[CV 1/5; 34/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 34/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.859 total time=   0.0s\n",
      "[CV 2/5; 34/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 34/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.840 total time=   0.0s\n",
      "[CV 3/5; 34/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 34/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.802 total time=   0.0s\n",
      "[CV 4/5; 34/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 34/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.784 total time=   0.0s\n",
      "[CV 5/5; 34/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 34/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.839 total time=   0.0s\n",
      "[CV 1/5; 35/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 35/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.869 total time=   0.0s\n",
      "[CV 2/5; 35/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 35/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.852 total time=   0.0s\n",
      "[CV 3/5; 35/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 35/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.829 total time=   0.0s\n",
      "[CV 4/5; 35/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 35/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.790 total time=   0.1s\n",
      "[CV 5/5; 35/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 35/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.854 total time=   0.1s\n",
      "[CV 1/5; 36/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 36/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.871 total time=   0.2s\n",
      "[CV 2/5; 36/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 36/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.854 total time=   0.2s\n",
      "[CV 3/5; 36/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 36/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 36/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 36/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.787 total time=   0.2s\n",
      "[CV 5/5; 36/81] START max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5; 36/81] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.853 total time=   0.2s\n",
      "[CV 1/5; 37/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 37/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 2/5; 37/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 37/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.850 total time=   0.0s\n",
      "[CV 3/5; 37/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 37/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.816 total time=   0.0s\n",
      "[CV 4/5; 37/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 37/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.788 total time=   0.0s\n",
      "[CV 5/5; 37/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 37/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.844 total time=   0.0s\n",
      "[CV 1/5; 38/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 38/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 38/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 38/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.860 total time=   0.1s\n",
      "[CV 3/5; 38/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 38/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.822 total time=   0.1s\n",
      "[CV 4/5; 38/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 38/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.807 total time=   0.0s\n",
      "[CV 5/5; 38/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 38/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.853 total time=   0.1s\n",
      "[CV 1/5; 39/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 39/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.876 total time=   0.3s\n",
      "[CV 2/5; 39/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 39/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 39/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 39/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 39/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 39/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.802 total time=   0.2s\n",
      "[CV 5/5; 39/81] START max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 39/81] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.852 total time=   0.2s\n",
      "[CV 1/5; 40/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 40/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.837 total time=   0.0s\n",
      "[CV 2/5; 40/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 40/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 3/5; 40/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 40/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.797 total time=   0.0s\n",
      "[CV 4/5; 40/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 40/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.820 total time=   0.0s\n",
      "[CV 5/5; 40/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 40/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.836 total time=   0.0s\n",
      "[CV 1/5; 41/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 41/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 41/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 41/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.858 total time=   0.0s\n",
      "[CV 3/5; 41/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 41/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.827 total time=   0.1s\n",
      "[CV 4/5; 41/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 41/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.806 total time=   0.1s\n",
      "[CV 5/5; 41/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 41/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.853 total time=   0.0s\n",
      "[CV 1/5; 42/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 42/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.871 total time=   0.2s\n",
      "[CV 2/5; 42/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 42/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 3/5; 42/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 42/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 42/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 42/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.804 total time=   0.2s\n",
      "[CV 5/5; 42/81] START max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 42/81] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.850 total time=   0.4s\n",
      "[CV 1/5; 43/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 43/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.854 total time=   0.0s\n",
      "[CV 2/5; 43/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 43/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 43/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 43/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.812 total time=   0.0s\n",
      "[CV 4/5; 43/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 43/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.777 total time=   0.0s\n",
      "[CV 5/5; 43/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 43/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.829 total time=   0.0s\n",
      "[CV 1/5; 44/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 44/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.868 total time=   0.0s\n",
      "[CV 2/5; 44/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 44/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 44/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 44/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.817 total time=   0.0s\n",
      "[CV 4/5; 44/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 44/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.782 total time=   0.1s\n",
      "[CV 5/5; 44/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 44/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.852 total time=   0.0s\n",
      "[CV 1/5; 45/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 45/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.876 total time=   0.2s\n",
      "[CV 2/5; 45/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 45/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.858 total time=   0.2s\n",
      "[CV 3/5; 45/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 45/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.816 total time=   0.2s\n",
      "[CV 4/5; 45/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 45/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.785 total time=   0.2s\n",
      "[CV 5/5; 45/81] START max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 45/81] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.851 total time=   0.2s\n",
      "[CV 1/5; 46/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 46/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 2/5; 46/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 46/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 46/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 46/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.789 total time=   0.0s\n",
      "[CV 4/5; 46/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 46/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 46/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 46/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.845 total time=   0.0s\n",
      "[CV 1/5; 47/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 47/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.880 total time=   0.0s\n",
      "[CV 2/5; 47/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 47/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.851 total time=   0.0s\n",
      "[CV 3/5; 47/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 47/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 47/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 47/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.785 total time=   0.0s\n",
      "[CV 5/5; 47/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 47/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.862 total time=   0.0s\n",
      "[CV 1/5; 48/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 48/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.883 total time=   0.2s\n",
      "[CV 2/5; 48/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 48/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 3/5; 48/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 48/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 4/5; 48/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 48/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.788 total time=   0.2s\n",
      "[CV 5/5; 48/81] START max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 48/81] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.862 total time=   0.2s\n",
      "[CV 1/5; 49/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 49/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 2/5; 49/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 49/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 49/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 49/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.789 total time=   0.0s\n",
      "[CV 4/5; 49/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 49/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 49/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 49/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.845 total time=   0.0s\n",
      "[CV 1/5; 50/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 50/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.880 total time=   0.0s\n",
      "[CV 2/5; 50/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 50/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.851 total time=   0.1s\n",
      "[CV 3/5; 50/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 50/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 50/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 50/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.785 total time=   0.2s\n",
      "[CV 5/5; 50/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 50/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.862 total time=   0.0s\n",
      "[CV 1/5; 51/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 51/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.883 total time=   0.2s\n",
      "[CV 2/5; 51/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 51/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 3/5; 51/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 51/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 4/5; 51/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 51/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.788 total time=   0.1s\n",
      "[CV 5/5; 51/81] START max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 51/81] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.862 total time=   0.2s\n",
      "[CV 1/5; 52/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 52/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.851 total time=   0.0s\n",
      "[CV 2/5; 52/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 52/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.838 total time=   0.0s\n",
      "[CV 3/5; 52/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 52/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.787 total time=   0.0s\n",
      "[CV 4/5; 52/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 52/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 52/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 52/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.846 total time=   0.0s\n",
      "[CV 1/5; 53/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 53/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.873 total time=   0.0s\n",
      "[CV 2/5; 53/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 53/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.860 total time=   0.0s\n",
      "[CV 3/5; 53/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 53/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.815 total time=   0.1s\n",
      "[CV 4/5; 53/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 53/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.783 total time=   0.1s\n",
      "[CV 5/5; 53/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 53/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.856 total time=   0.0s\n",
      "[CV 1/5; 54/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 54/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 54/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 54/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 54/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 54/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.1s\n",
      "[CV 4/5; 54/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 54/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.782 total time=   0.2s\n",
      "[CV 5/5; 54/81] START max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 54/81] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.851 total time=   0.2s\n",
      "[CV 1/5; 55/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 55/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.844 total time=   0.0s\n",
      "[CV 2/5; 55/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 55/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.839 total time=   0.0s\n",
      "[CV 3/5; 55/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 55/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.790 total time=   0.0s\n",
      "[CV 4/5; 55/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 55/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.810 total time=   0.0s\n",
      "[CV 5/5; 55/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 55/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=10;, score=0.818 total time=   0.0s\n",
      "[CV 1/5; 56/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 56/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.859 total time=   0.0s\n",
      "[CV 2/5; 56/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 56/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.840 total time=   0.0s\n",
      "[CV 3/5; 56/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 56/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.823 total time=   0.0s\n",
      "[CV 4/5; 56/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 56/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.822 total time=   0.0s\n",
      "[CV 5/5; 56/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 56/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=50;, score=0.842 total time=   0.0s\n",
      "[CV 1/5; 57/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 57/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.860 total time=   0.2s\n",
      "[CV 2/5; 57/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 57/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.842 total time=   0.4s\n",
      "[CV 3/5; 57/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 57/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 57/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 57/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.812 total time=   0.2s\n",
      "[CV 5/5; 57/81] START max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 57/81] END max_depth=30, min_samples_leaf=1, min_samples_split=2, n_estimators=100;, score=0.839 total time=   0.2s\n",
      "[CV 1/5; 58/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 58/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.836 total time=   0.0s\n",
      "[CV 2/5; 58/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 58/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 3/5; 58/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 58/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.824 total time=   0.0s\n",
      "[CV 4/5; 58/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 58/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.795 total time=   0.0s\n",
      "[CV 5/5; 58/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 58/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=10;, score=0.840 total time=   0.0s\n",
      "[CV 1/5; 59/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 59/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.871 total time=   0.1s\n",
      "[CV 2/5; 59/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 59/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.852 total time=   0.0s\n",
      "[CV 3/5; 59/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 59/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.830 total time=   0.1s\n",
      "[CV 4/5; 59/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 59/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.810 total time=   0.2s\n",
      "[CV 5/5; 59/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 59/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=50;, score=0.855 total time=   0.0s\n",
      "[CV 1/5; 60/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 60/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.875 total time=   0.2s\n",
      "[CV 2/5; 60/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 60/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.857 total time=   0.2s\n",
      "[CV 3/5; 60/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 60/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 60/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5; 60/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.808 total time=   0.2s\n",
      "[CV 5/5; 60/81] START max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 60/81] END max_depth=30, min_samples_leaf=1, min_samples_split=5, n_estimators=100;, score=0.850 total time=   0.2s\n",
      "[CV 1/5; 61/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 61/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.859 total time=   0.0s\n",
      "[CV 2/5; 61/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 61/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.840 total time=   0.0s\n",
      "[CV 3/5; 61/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 61/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.802 total time=   0.0s\n",
      "[CV 4/5; 61/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 61/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.784 total time=   0.0s\n",
      "[CV 5/5; 61/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 61/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=10;, score=0.839 total time=   0.0s\n",
      "[CV 1/5; 62/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 62/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.869 total time=   0.0s\n",
      "[CV 2/5; 62/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 62/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.852 total time=   0.0s\n",
      "[CV 3/5; 62/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 62/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.829 total time=   0.0s\n",
      "[CV 4/5; 62/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 62/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.790 total time=   0.0s\n",
      "[CV 5/5; 62/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 62/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=50;, score=0.854 total time=   0.0s\n",
      "[CV 1/5; 63/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 63/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.871 total time=   0.2s\n",
      "[CV 2/5; 63/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 63/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.854 total time=   0.2s\n",
      "[CV 3/5; 63/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 63/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 63/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 63/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.787 total time=   0.2s\n",
      "[CV 5/5; 63/81] START max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 63/81] END max_depth=30, min_samples_leaf=1, min_samples_split=10, n_estimators=100;, score=0.853 total time=   0.1s\n",
      "[CV 1/5; 64/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 64/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.852 total time=   0.0s\n",
      "[CV 2/5; 64/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 64/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.850 total time=   0.0s\n",
      "[CV 3/5; 64/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 64/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.816 total time=   0.0s\n",
      "[CV 4/5; 64/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 64/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.788 total time=   0.0s\n",
      "[CV 5/5; 64/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 64/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=10;, score=0.844 total time=   0.0s\n",
      "[CV 1/5; 65/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 65/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 65/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 65/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.860 total time=   0.1s\n",
      "[CV 3/5; 65/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 65/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.822 total time=   0.0s\n",
      "[CV 4/5; 65/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 65/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.807 total time=   0.0s\n",
      "[CV 5/5; 65/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 65/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.853 total time=   0.0s\n",
      "[CV 1/5; 66/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 66/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.876 total time=   0.2s\n",
      "[CV 2/5; 66/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 66/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 66/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 66/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 66/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 66/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.802 total time=   0.2s\n",
      "[CV 5/5; 66/81] START max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 66/81] END max_depth=30, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.852 total time=   0.2s\n",
      "[CV 1/5; 67/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 67/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.837 total time=   0.0s\n",
      "[CV 2/5; 67/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 67/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 3/5; 67/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 67/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.797 total time=   0.0s\n",
      "[CV 4/5; 67/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 67/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.820 total time=   0.0s\n",
      "[CV 5/5; 67/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10\n",
      "[CV 5/5; 67/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.836 total time=   0.0s\n",
      "[CV 1/5; 68/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 68/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.874 total time=   0.0s\n",
      "[CV 2/5; 68/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 68/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.858 total time=   0.1s\n",
      "[CV 3/5; 68/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 68/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.827 total time=   0.0s\n",
      "[CV 4/5; 68/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 68/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.806 total time=   0.0s\n",
      "[CV 5/5; 68/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 68/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.853 total time=   0.0s\n",
      "[CV 1/5; 69/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 69/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.871 total time=   0.2s\n",
      "[CV 2/5; 69/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 69/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.861 total time=   0.2s\n",
      "[CV 3/5; 69/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 69/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.828 total time=   0.2s\n",
      "[CV 4/5; 69/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 69/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.804 total time=   0.2s\n",
      "[CV 5/5; 69/81] START max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 69/81] END max_depth=30, min_samples_leaf=2, min_samples_split=5, n_estimators=100;, score=0.850 total time=   0.3s\n",
      "[CV 1/5; 70/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 70/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.854 total time=   0.0s\n",
      "[CV 2/5; 70/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 70/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 70/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 70/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.812 total time=   0.0s\n",
      "[CV 4/5; 70/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 70/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.777 total time=   0.0s\n",
      "[CV 5/5; 70/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 70/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.829 total time=   0.0s\n",
      "[CV 1/5; 71/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 71/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.868 total time=   0.1s\n",
      "[CV 2/5; 71/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 71/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 71/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 71/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.817 total time=   0.0s\n",
      "[CV 4/5; 71/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 71/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.782 total time=   0.0s\n",
      "[CV 5/5; 71/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 71/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=50;, score=0.852 total time=   0.1s\n",
      "[CV 1/5; 72/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 72/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.876 total time=   0.2s\n",
      "[CV 2/5; 72/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 72/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.858 total time=   0.1s\n",
      "[CV 3/5; 72/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 72/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.816 total time=   0.2s\n",
      "[CV 4/5; 72/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 72/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.785 total time=   0.2s\n",
      "[CV 5/5; 72/81] START max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 72/81] END max_depth=30, min_samples_leaf=2, min_samples_split=10, n_estimators=100;, score=0.851 total time=   0.2s\n",
      "[CV 1/5; 73/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 1/5; 73/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 2/5; 73/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 2/5; 73/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 73/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 3/5; 73/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.789 total time=   0.0s\n",
      "[CV 4/5; 73/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 4/5; 73/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 73/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10\n",
      "[CV 5/5; 73/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.845 total time=   0.0s\n",
      "[CV 1/5; 74/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 74/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 74/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 74/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.851 total time=   0.2s\n",
      "[CV 3/5; 74/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 74/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.825 total time=   0.0s\n",
      "[CV 4/5; 74/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 74/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.785 total time=   0.0s\n",
      "[CV 5/5; 74/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 74/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.862 total time=   0.2s\n",
      "[CV 1/5; 75/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 75/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.883 total time=   0.2s\n",
      "[CV 2/5; 75/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 75/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 3/5; 75/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 75/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 4/5; 75/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 75/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.788 total time=   0.2s\n",
      "[CV 5/5; 75/81] START max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 75/81] END max_depth=30, min_samples_leaf=4, min_samples_split=2, n_estimators=100;, score=0.862 total time=   0.2s\n",
      "[CV 1/5; 76/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 1/5; 76/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.863 total time=   0.0s\n",
      "[CV 2/5; 76/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 2/5; 76/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.843 total time=   0.0s\n",
      "[CV 3/5; 76/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 3/5; 76/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.789 total time=   0.0s\n",
      "[CV 4/5; 76/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n",
      "[CV 4/5; 76/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 76/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5; 76/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=10;, score=0.845 total time=   0.0s\n",
      "[CV 1/5; 77/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 77/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.880 total time=   0.0s\n",
      "[CV 2/5; 77/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 77/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.851 total time=   0.0s\n",
      "[CV 3/5; 77/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 77/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 77/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 77/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.785 total time=   0.0s\n",
      "[CV 5/5; 77/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 77/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=50;, score=0.862 total time=   0.1s\n",
      "[CV 1/5; 78/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 78/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.883 total time=   0.5s\n",
      "[CV 2/5; 78/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 78/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 3/5; 78/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 78/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.815 total time=   0.2s\n",
      "[CV 4/5; 78/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 78/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.788 total time=   0.3s\n",
      "[CV 5/5; 78/81] START max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 78/81] END max_depth=30, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.862 total time=   0.2s\n",
      "[CV 1/5; 79/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 1/5; 79/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.851 total time=   0.0s\n",
      "[CV 2/5; 79/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 2/5; 79/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.838 total time=   0.0s\n",
      "[CV 3/5; 79/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 3/5; 79/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.787 total time=   0.0s\n",
      "[CV 4/5; 79/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 4/5; 79/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.770 total time=   0.0s\n",
      "[CV 5/5; 79/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10\n",
      "[CV 5/5; 79/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.846 total time=   0.0s\n",
      "[CV 1/5; 80/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 80/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.873 total time=   0.0s\n",
      "[CV 2/5; 80/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 80/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.860 total time=   0.0s\n",
      "[CV 3/5; 80/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 80/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.815 total time=   0.0s\n",
      "[CV 4/5; 80/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 80/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.783 total time=   0.0s\n",
      "[CV 5/5; 80/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 80/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.856 total time=   0.1s\n",
      "[CV 1/5; 81/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 81/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.880 total time=   0.2s\n",
      "[CV 2/5; 81/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 81/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.863 total time=   0.2s\n",
      "[CV 3/5; 81/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 81/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.3s\n",
      "[CV 4/5; 81/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 81/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.782 total time=   0.3s\n",
      "[CV 5/5; 81/81] START max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 81/81] END max_depth=30, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.851 total time=   0.2s\n",
      "Fitting 5 folds for each of 81 candidates, totalling 405 fits\n",
      "[CV 1/5; 1/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 1/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.804 total time=   0.0s\n",
      "[CV 2/5; 1/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 1/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.825 total time=   0.0s\n",
      "[CV 3/5; 1/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 1/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.758 total time=   0.0s\n",
      "[CV 4/5; 1/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 1/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.681 total time=   0.0s\n",
      "[CV 5/5; 1/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 1/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.833 total time=   0.0s\n",
      "[CV 1/5; 2/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 2/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.856 total time=   0.1s\n",
      "[CV 2/5; 2/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 2/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.832 total time=   0.1s\n",
      "[CV 3/5; 2/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 2/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.793 total time=   0.1s\n",
      "[CV 4/5; 2/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 2/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.728 total time=   0.1s\n",
      "[CV 5/5; 2/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 2/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.847 total time=   0.2s\n",
      "[CV 1/5; 3/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 3/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.874 total time=   0.2s\n",
      "[CV 2/5; 3/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 3/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.853 total time=   0.2s\n",
      "[CV 3/5; 3/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 3/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.814 total time=   0.1s\n",
      "[CV 4/5; 3/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 3/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.751 total time=   0.2s\n",
      "[CV 5/5; 3/81] START learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 3/81] END learning_rate=0.01, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.849 total time=   0.1s\n",
      "[CV 1/5; 4/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 4/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.804 total time=   0.0s\n",
      "[CV 2/5; 4/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 4/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.825 total time=   0.0s\n",
      "[CV 3/5; 4/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 4/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.758 total time=   0.0s\n",
      "[CV 4/5; 4/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 4/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.681 total time=   0.0s\n",
      "[CV 5/5; 4/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 4/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.833 total time=   0.0s\n",
      "[CV 1/5; 5/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 5/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.856 total time=   0.2s\n",
      "[CV 2/5; 5/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 5/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.832 total time=   0.2s\n",
      "[CV 3/5; 5/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 5/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.793 total time=   0.3s\n",
      "[CV 4/5; 5/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 5/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.728 total time=   0.1s\n",
      "[CV 5/5; 5/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 5/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.847 total time=   0.1s\n",
      "[CV 1/5; 6/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 6/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 6/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 6/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.853 total time=   0.1s\n",
      "[CV 3/5; 6/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 6/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.814 total time=   0.1s\n",
      "[CV 4/5; 6/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 6/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.751 total time=   0.2s\n",
      "[CV 5/5; 6/81] START learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 6/81] END learning_rate=0.01, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.849 total time=   0.1s\n",
      "[CV 1/5; 7/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 7/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.804 total time=   0.0s\n",
      "[CV 2/5; 7/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 7/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.825 total time=   0.0s\n",
      "[CV 3/5; 7/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 7/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.758 total time=   0.0s\n",
      "[CV 4/5; 7/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 7/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.681 total time=   0.0s\n",
      "[CV 5/5; 7/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 7/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.833 total time=   0.0s\n",
      "[CV 1/5; 8/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 8/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.856 total time=   0.1s\n",
      "[CV 2/5; 8/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 8/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.832 total time=   0.1s\n",
      "[CV 3/5; 8/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 8/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.793 total time=   0.1s\n",
      "[CV 4/5; 8/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 8/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.728 total time=   0.1s\n",
      "[CV 5/5; 8/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 8/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.847 total time=   0.1s\n",
      "[CV 1/5; 9/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 9/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 9/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 9/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.853 total time=   0.2s\n",
      "[CV 3/5; 9/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 9/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.812 total time=   0.2s\n",
      "[CV 4/5; 9/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 9/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.751 total time=   0.1s\n",
      "[CV 5/5; 9/81] START learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 9/81] END learning_rate=0.01, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.849 total time=   0.2s\n",
      "[CV 1/5; 10/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 10/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.876 total time=   0.0s\n",
      "[CV 2/5; 10/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 10/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.874 total time=   0.1s\n",
      "[CV 3/5; 10/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 10/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.800 total time=   0.2s\n",
      "[CV 4/5; 10/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 10/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.748 total time=   0.1s\n",
      "[CV 5/5; 10/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 10/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.843 total time=   0.1s\n",
      "[CV 1/5; 11/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 11/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.889 total time=   0.2s\n",
      "[CV 2/5; 11/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 11/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.869 total time=   0.2s\n",
      "[CV 3/5; 11/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 11/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.817 total time=   0.2s\n",
      "[CV 4/5; 11/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 11/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.760 total time=   0.2s\n",
      "[CV 5/5; 11/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 11/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.843 total time=   0.3s\n",
      "[CV 1/5; 12/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 12/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.890 total time=   0.3s\n",
      "[CV 2/5; 12/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 12/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.868 total time=   0.3s\n",
      "[CV 3/5; 12/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 12/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.818 total time=   0.4s\n",
      "[CV 4/5; 12/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 12/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.773 total time=   0.4s\n",
      "[CV 5/5; 12/81] START learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 12/81] END learning_rate=0.01, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.861 total time=   0.4s\n",
      "[CV 1/5; 13/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 13/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.874 total time=   0.1s\n",
      "[CV 2/5; 13/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 13/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.874 total time=   0.0s\n",
      "[CV 3/5; 13/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 13/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.793 total time=   0.1s\n",
      "[CV 4/5; 13/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 13/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 13/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 13/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.843 total time=   0.1s\n",
      "[CV 1/5; 14/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 14/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.887 total time=   0.2s\n",
      "[CV 2/5; 14/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 14/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.869 total time=   0.2s\n",
      "[CV 3/5; 14/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 14/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.816 total time=   0.2s\n",
      "[CV 4/5; 14/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 14/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.760 total time=   0.2s\n",
      "[CV 5/5; 14/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 14/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.843 total time=   0.2s\n",
      "[CV 1/5; 15/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 15/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.885 total time=   0.3s\n",
      "[CV 2/5; 15/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 15/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.868 total time=   0.5s\n",
      "[CV 3/5; 15/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 15/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.819 total time=   0.4s\n",
      "[CV 4/5; 15/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 15/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.773 total time=   0.3s\n",
      "[CV 5/5; 15/81] START learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 15/81] END learning_rate=0.01, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.861 total time=   0.4s\n",
      "[CV 1/5; 16/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 16/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.869 total time=   0.0s\n",
      "[CV 2/5; 16/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 16/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.871 total time=   0.0s\n",
      "[CV 3/5; 16/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 16/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.792 total time=   0.0s\n",
      "[CV 4/5; 16/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 16/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.745 total time=   0.1s\n",
      "[CV 5/5; 16/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 16/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.855 total time=   0.1s\n",
      "[CV 1/5; 17/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 17/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.883 total time=   0.2s\n",
      "[CV 2/5; 17/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 17/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.869 total time=   0.2s\n",
      "[CV 3/5; 17/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 17/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.808 total time=   0.2s\n",
      "[CV 4/5; 17/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 17/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.766 total time=   0.3s\n",
      "[CV 5/5; 17/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 17/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.849 total time=   0.3s\n",
      "[CV 1/5; 18/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 18/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.885 total time=   0.4s\n",
      "[CV 2/5; 18/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 18/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.869 total time=   0.3s\n",
      "[CV 3/5; 18/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 18/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.812 total time=   0.4s\n",
      "[CV 4/5; 18/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 18/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.776 total time=   0.3s\n",
      "[CV 5/5; 18/81] START learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5; 18/81] END learning_rate=0.01, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.867 total time=   0.4s\n",
      "[CV 1/5; 19/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 19/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.848 total time=   0.2s\n",
      "[CV 2/5; 19/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 19/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.850 total time=   0.2s\n",
      "[CV 3/5; 19/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 19/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 19/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 19/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.750 total time=   0.3s\n",
      "[CV 5/5; 19/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 19/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.855 total time=   0.2s\n",
      "[CV 1/5; 20/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 20/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.849 total time=   0.4s\n",
      "[CV 2/5; 20/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 20/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.856 total time=   0.4s\n",
      "[CV 3/5; 20/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 20/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.823 total time=   0.6s\n",
      "[CV 4/5; 20/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 20/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.747 total time=   0.4s\n",
      "[CV 5/5; 20/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 20/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.860 total time=   0.5s\n",
      "[CV 1/5; 21/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 21/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.852 total time=   0.8s\n",
      "[CV 2/5; 21/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 21/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.855 total time=   0.9s\n",
      "[CV 3/5; 21/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 21/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.826 total time=   0.8s\n",
      "[CV 4/5; 21/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 21/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.753 total time=   0.9s\n",
      "[CV 5/5; 21/81] START learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 21/81] END learning_rate=0.01, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.862 total time=   0.7s\n",
      "[CV 1/5; 22/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 22/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.849 total time=   0.2s\n",
      "[CV 2/5; 22/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 22/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.852 total time=   0.4s\n",
      "[CV 3/5; 22/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 22/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.805 total time=   0.2s\n",
      "[CV 4/5; 22/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 22/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.743 total time=   0.2s\n",
      "[CV 5/5; 22/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 22/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.867 total time=   0.2s\n",
      "[CV 1/5; 23/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 23/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.853 total time=   0.6s\n",
      "[CV 2/5; 23/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 23/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.854 total time=   0.4s\n",
      "[CV 3/5; 23/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 23/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.818 total time=   0.4s\n",
      "[CV 4/5; 23/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 23/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.743 total time=   0.4s\n",
      "[CV 5/5; 23/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 23/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.860 total time=   0.4s\n",
      "[CV 1/5; 24/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 24/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.856 total time=   0.8s\n",
      "[CV 2/5; 24/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 24/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.858 total time=   0.7s\n",
      "[CV 3/5; 24/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 24/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.825 total time=   0.7s\n",
      "[CV 4/5; 24/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 24/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.756 total time=   0.7s\n",
      "[CV 5/5; 24/81] START learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 24/81] END learning_rate=0.01, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.865 total time=   0.7s\n",
      "[CV 1/5; 25/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 25/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.843 total time=   0.2s\n",
      "[CV 2/5; 25/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 25/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.856 total time=   0.2s\n",
      "[CV 3/5; 25/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 25/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.812 total time=   0.1s\n",
      "[CV 4/5; 25/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 25/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.733 total time=   0.1s\n",
      "[CV 5/5; 25/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 25/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.871 total time=   0.1s\n",
      "[CV 1/5; 26/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 26/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.848 total time=   0.5s\n",
      "[CV 2/5; 26/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 26/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.853 total time=   0.3s\n",
      "[CV 3/5; 26/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 26/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.814 total time=   0.4s\n",
      "[CV 4/5; 26/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 26/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.747 total time=   0.4s\n",
      "[CV 5/5; 26/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 26/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.872 total time=   0.4s\n",
      "[CV 1/5; 27/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 27/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.858 total time=   0.6s\n",
      "[CV 2/5; 27/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 27/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.859 total time=   0.6s\n",
      "[CV 3/5; 27/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 27/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.815 total time=   0.6s\n",
      "[CV 4/5; 27/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 27/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.752 total time=   0.6s\n",
      "[CV 5/5; 27/81] START learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 27/81] END learning_rate=0.01, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.876 total time=   0.7s\n",
      "[CV 1/5; 28/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 28/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.884 total time=   0.0s\n",
      "[CV 2/5; 28/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 28/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.857 total time=   0.0s\n",
      "[CV 3/5; 28/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 28/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.840 total time=   0.0s\n",
      "[CV 4/5; 28/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 28/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.769 total time=   0.0s\n",
      "[CV 5/5; 28/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 28/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.860 total time=   0.0s\n",
      "[CV 1/5; 29/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 29/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.886 total time=   0.1s\n",
      "[CV 2/5; 29/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 29/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.862 total time=   0.1s\n",
      "[CV 3/5; 29/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 29/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.1s\n",
      "[CV 4/5; 29/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 29/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.776 total time=   0.1s\n",
      "[CV 5/5; 29/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 29/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.865 total time=   0.1s\n",
      "[CV 1/5; 30/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 30/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.866 total time=   0.1s\n",
      "[CV 2/5; 30/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 30/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.862 total time=   0.1s\n",
      "[CV 3/5; 30/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 30/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 30/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 30/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.773 total time=   0.2s\n",
      "[CV 5/5; 30/81] START learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 30/81] END learning_rate=0.1, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.866 total time=   0.3s\n",
      "[CV 1/5; 31/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 31/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.880 total time=   0.0s\n",
      "[CV 2/5; 31/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 31/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.854 total time=   0.0s\n",
      "[CV 3/5; 31/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 31/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.840 total time=   0.0s\n",
      "[CV 4/5; 31/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 31/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.764 total time=   0.0s\n",
      "[CV 5/5; 31/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 31/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.859 total time=   0.0s\n",
      "[CV 1/5; 32/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 32/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.877 total time=   0.0s\n",
      "[CV 2/5; 32/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 32/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.858 total time=   0.0s\n",
      "[CV 3/5; 32/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 32/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.828 total time=   0.1s\n",
      "[CV 4/5; 32/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 32/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.770 total time=   0.1s\n",
      "[CV 5/5; 32/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 32/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.860 total time=   0.1s\n",
      "[CV 1/5; 33/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 33/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.864 total time=   0.1s\n",
      "[CV 2/5; 33/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 33/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.855 total time=   0.2s\n",
      "[CV 3/5; 33/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 33/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.827 total time=   0.1s\n",
      "[CV 4/5; 33/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 33/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.765 total time=   0.2s\n",
      "[CV 5/5; 33/81] START learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 33/81] END learning_rate=0.1, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.862 total time=   0.1s\n",
      "[CV 1/5; 34/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 34/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.881 total time=   0.0s\n",
      "[CV 2/5; 34/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 34/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.858 total time=   0.0s\n",
      "[CV 3/5; 34/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 34/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.836 total time=   0.0s\n",
      "[CV 4/5; 34/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 34/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.764 total time=   0.0s\n",
      "[CV 5/5; 34/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 34/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.864 total time=   0.0s\n",
      "[CV 1/5; 35/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 35/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.875 total time=   0.1s\n",
      "[CV 2/5; 35/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 35/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.864 total time=   0.0s\n",
      "[CV 3/5; 35/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 35/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.830 total time=   0.1s\n",
      "[CV 4/5; 35/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 35/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.768 total time=   0.1s\n",
      "[CV 5/5; 35/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 35/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.862 total time=   0.1s\n",
      "[CV 1/5; 36/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 36/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.863 total time=   0.2s\n",
      "[CV 2/5; 36/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 36/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.867 total time=   0.2s\n",
      "[CV 3/5; 36/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 36/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.825 total time=   0.1s\n",
      "[CV 4/5; 36/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 36/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.763 total time=   0.1s\n",
      "[CV 5/5; 36/81] START learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 36/81] END learning_rate=0.1, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.868 total time=   0.2s\n",
      "[CV 1/5; 37/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 37/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.878 total time=   0.1s\n",
      "[CV 2/5; 37/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 37/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.860 total time=   0.0s\n",
      "[CV 3/5; 37/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 37/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.824 total time=   0.0s\n",
      "[CV 4/5; 37/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 37/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.782 total time=   0.0s\n",
      "[CV 5/5; 37/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 37/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.869 total time=   0.0s\n",
      "[CV 1/5; 38/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 38/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.880 total time=   0.7s\n",
      "[CV 2/5; 38/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 38/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.858 total time=   0.3s\n",
      "[CV 3/5; 38/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 38/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.819 total time=   0.3s\n",
      "[CV 4/5; 38/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 38/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.787 total time=   0.5s\n",
      "[CV 5/5; 38/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 38/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.863 total time=   0.3s\n",
      "[CV 1/5; 39/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 39/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.876 total time=   0.5s\n",
      "[CV 2/5; 39/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 39/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.855 total time=   0.8s\n",
      "[CV 3/5; 39/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 39/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.818 total time=   0.8s\n",
      "[CV 4/5; 39/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 39/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.787 total time=   0.6s\n",
      "[CV 5/5; 39/81] START learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 39/81] END learning_rate=0.1, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.855 total time=   0.6s\n",
      "[CV 1/5; 40/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 40/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.882 total time=   0.2s\n",
      "[CV 2/5; 40/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 40/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.858 total time=   0.1s\n",
      "[CV 3/5; 40/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 40/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.832 total time=   0.1s\n",
      "[CV 4/5; 40/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 40/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.787 total time=   0.2s\n",
      "[CV 5/5; 40/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 40/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.870 total time=   0.1s\n",
      "[CV 1/5; 41/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 41/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.877 total time=   0.3s\n",
      "[CV 2/5; 41/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 41/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.855 total time=   0.2s\n",
      "[CV 3/5; 41/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 41/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.822 total time=   0.4s\n",
      "[CV 4/5; 41/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 41/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.781 total time=   0.4s\n",
      "[CV 5/5; 41/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 41/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.866 total time=   0.2s\n",
      "[CV 1/5; 42/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 42/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.873 total time=   0.5s\n",
      "[CV 2/5; 42/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 42/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.854 total time=   0.3s\n",
      "[CV 3/5; 42/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 42/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.823 total time=   0.4s\n",
      "[CV 4/5; 42/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 42/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.778 total time=   0.4s\n",
      "[CV 5/5; 42/81] START learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 42/81] END learning_rate=0.1, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.860 total time=   0.4s\n",
      "[CV 1/5; 43/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 43/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.884 total time=   0.1s\n",
      "[CV 2/5; 43/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 43/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.857 total time=   0.1s\n",
      "[CV 3/5; 43/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 43/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.832 total time=   0.1s\n",
      "[CV 4/5; 43/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 43/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.794 total time=   0.0s\n",
      "[CV 5/5; 43/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 43/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.878 total time=   0.1s\n",
      "[CV 1/5; 44/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 44/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.879 total time=   0.2s\n",
      "[CV 2/5; 44/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 44/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.860 total time=   0.2s\n",
      "[CV 3/5; 44/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 44/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.831 total time=   0.2s\n",
      "[CV 4/5; 44/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 44/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.794 total time=   0.3s\n",
      "[CV 5/5; 44/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 44/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.868 total time=   0.3s\n",
      "[CV 1/5; 45/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 45/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.871 total time=   0.5s\n",
      "[CV 2/5; 45/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 45/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.861 total time=   0.3s\n",
      "[CV 3/5; 45/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 45/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.831 total time=   0.4s\n",
      "[CV 4/5; 45/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 45/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.793 total time=   0.4s\n",
      "[CV 5/5; 45/81] START learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 45/81] END learning_rate=0.1, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.865 total time=   0.5s\n",
      "[CV 1/5; 46/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 46/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.876 total time=   0.2s\n",
      "[CV 2/5; 46/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 46/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.859 total time=   0.4s\n",
      "[CV 3/5; 46/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 46/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.831 total time=   0.2s\n",
      "[CV 4/5; 46/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 46/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.780 total time=   0.5s\n",
      "[CV 5/5; 46/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 46/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.873 total time=   0.5s\n",
      "[CV 1/5; 47/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 47/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.876 total time=   0.5s\n",
      "[CV 2/5; 47/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 47/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.850 total time=   0.5s\n",
      "[CV 3/5; 47/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 47/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.828 total time=   0.6s\n",
      "[CV 4/5; 47/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 47/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.793 total time=   0.5s\n",
      "[CV 5/5; 47/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 47/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.858 total time=   0.7s\n",
      "[CV 1/5; 48/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 48/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.874 total time=   0.9s\n",
      "[CV 2/5; 48/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 48/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.847 total time=   0.8s\n",
      "[CV 3/5; 48/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 48/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.821 total time=   1.0s\n",
      "[CV 4/5; 48/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 48/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.797 total time=   1.1s\n",
      "[CV 5/5; 48/81] START learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 48/81] END learning_rate=0.1, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.845 total time=   1.1s\n",
      "[CV 1/5; 49/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 49/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.881 total time=   0.2s\n",
      "[CV 2/5; 49/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 49/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.854 total time=   0.2s\n",
      "[CV 3/5; 49/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 49/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.834 total time=   0.2s\n",
      "[CV 4/5; 49/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 49/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.783 total time=   0.2s\n",
      "[CV 5/5; 49/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 49/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.870 total time=   0.3s\n",
      "[CV 1/5; 50/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 50/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.877 total time=   0.5s\n",
      "[CV 2/5; 50/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 50/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.851 total time=   0.5s\n",
      "[CV 3/5; 50/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 50/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.832 total time=   0.8s\n",
      "[CV 4/5; 50/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 50/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.789 total time=   0.6s\n",
      "[CV 5/5; 50/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 50/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.868 total time=   0.6s\n",
      "[CV 1/5; 51/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 51/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.872 total time=   0.7s\n",
      "[CV 2/5; 51/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 51/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.849 total time=   0.8s\n",
      "[CV 3/5; 51/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 51/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.830 total time=   1.0s\n",
      "[CV 4/5; 51/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 51/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.802 total time=   0.7s\n",
      "[CV 5/5; 51/81] START learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 51/81] END learning_rate=0.1, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.850 total time=   0.9s\n",
      "[CV 1/5; 52/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 52/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.872 total time=   0.2s\n",
      "[CV 2/5; 52/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 52/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.857 total time=   0.1s\n",
      "[CV 3/5; 52/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 52/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.823 total time=   0.2s\n",
      "[CV 4/5; 52/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 52/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.788 total time=   0.2s\n",
      "[CV 5/5; 52/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 52/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.879 total time=   0.1s\n",
      "[CV 1/5; 53/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 53/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.873 total time=   0.5s\n",
      "[CV 2/5; 53/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 53/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.856 total time=   0.4s\n",
      "[CV 3/5; 53/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 53/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.817 total time=   0.4s\n",
      "[CV 4/5; 53/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 53/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.798 total time=   0.4s\n",
      "[CV 5/5; 53/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 53/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.868 total time=   0.5s\n",
      "[CV 1/5; 54/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 54/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.872 total time=   0.6s\n",
      "[CV 2/5; 54/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 54/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.857 total time=   0.6s\n",
      "[CV 3/5; 54/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 54/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.818 total time=   0.6s\n",
      "[CV 4/5; 54/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 54/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.802 total time=   0.7s\n",
      "[CV 5/5; 54/81] START learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 54/81] END learning_rate=0.1, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.855 total time=   0.7s\n",
      "[CV 1/5; 55/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 55/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.839 total time=   0.1s\n",
      "[CV 2/5; 55/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 55/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.849 total time=   0.0s\n",
      "[CV 3/5; 55/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 55/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.802 total time=   0.0s\n",
      "[CV 4/5; 55/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 55/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.761 total time=   0.0s\n",
      "[CV 5/5; 55/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 55/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=50;, score=0.850 total time=   0.0s\n",
      "[CV 1/5; 56/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 56/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.839 total time=   0.1s\n",
      "[CV 2/5; 56/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 56/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.852 total time=   0.1s\n",
      "[CV 3/5; 56/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 56/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.808 total time=   0.1s\n",
      "[CV 4/5; 56/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 56/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.761 total time=   0.1s\n",
      "[CV 5/5; 56/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 56/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=100;, score=0.837 total time=   0.0s\n",
      "[CV 1/5; 57/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 57/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.827 total time=   0.2s\n",
      "[CV 2/5; 57/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 57/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.850 total time=   0.1s\n",
      "[CV 3/5; 57/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 57/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.802 total time=   0.2s\n",
      "[CV 4/5; 57/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 57/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.763 total time=   0.2s\n",
      "[CV 5/5; 57/81] START learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5; 57/81] END learning_rate=0.5, max_depth=3, min_samples_split=2, n_estimators=150;, score=0.834 total time=   0.2s\n",
      "[CV 1/5; 58/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 58/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.839 total time=   0.0s\n",
      "[CV 2/5; 58/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 58/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.846 total time=   0.0s\n",
      "[CV 3/5; 58/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 58/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.804 total time=   0.0s\n",
      "[CV 4/5; 58/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 58/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.765 total time=   0.0s\n",
      "[CV 5/5; 58/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 58/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=50;, score=0.830 total time=   0.0s\n",
      "[CV 1/5; 59/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 59/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.845 total time=   0.1s\n",
      "[CV 2/5; 59/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 59/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.844 total time=   0.1s\n",
      "[CV 3/5; 59/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 59/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.799 total time=   0.1s\n",
      "[CV 4/5; 59/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 59/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.773 total time=   0.1s\n",
      "[CV 5/5; 59/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 59/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=100;, score=0.825 total time=   0.1s\n",
      "[CV 1/5; 60/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 60/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.843 total time=   0.2s\n",
      "[CV 2/5; 60/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 60/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.844 total time=   0.2s\n",
      "[CV 3/5; 60/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 60/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.801 total time=   0.5s\n",
      "[CV 4/5; 60/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 60/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.765 total time=   0.3s\n",
      "[CV 5/5; 60/81] START learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 60/81] END learning_rate=0.5, max_depth=3, min_samples_split=5, n_estimators=150;, score=0.827 total time=   0.6s\n",
      "[CV 1/5; 61/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 61/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.830 total time=   0.1s\n",
      "[CV 2/5; 61/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 61/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.846 total time=   0.0s\n",
      "[CV 3/5; 61/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 61/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.818 total time=   0.0s\n",
      "[CV 4/5; 61/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 61/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.772 total time=   0.0s\n",
      "[CV 5/5; 61/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 61/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=50;, score=0.854 total time=   0.1s\n",
      "[CV 1/5; 62/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 62/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.842 total time=   0.1s\n",
      "[CV 2/5; 62/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 62/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.845 total time=   0.1s\n",
      "[CV 3/5; 62/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 62/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.807 total time=   0.1s\n",
      "[CV 4/5; 62/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 62/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.759 total time=   0.1s\n",
      "[CV 5/5; 62/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 62/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=100;, score=0.840 total time=   0.2s\n",
      "[CV 1/5; 63/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 63/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.844 total time=   0.2s\n",
      "[CV 2/5; 63/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 63/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.844 total time=   0.2s\n",
      "[CV 3/5; 63/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 63/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.807 total time=   0.2s\n",
      "[CV 4/5; 63/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 63/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.752 total time=   0.2s\n",
      "[CV 5/5; 63/81] START learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 63/81] END learning_rate=0.5, max_depth=3, min_samples_split=10, n_estimators=150;, score=0.831 total time=   0.3s\n",
      "[CV 1/5; 64/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 64/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.873 total time=   0.1s\n",
      "[CV 2/5; 64/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 64/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.851 total time=   0.0s\n",
      "[CV 3/5; 64/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 3/5; 64/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.809 total time=   0.1s\n",
      "[CV 4/5; 64/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 64/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.796 total time=   0.2s\n",
      "[CV 5/5; 64/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 64/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=50;, score=0.847 total time=   0.1s\n",
      "[CV 1/5; 65/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 65/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.871 total time=   0.2s\n",
      "[CV 2/5; 65/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 65/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.853 total time=   0.3s\n",
      "[CV 3/5; 65/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 65/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.804 total time=   0.2s\n",
      "[CV 4/5; 65/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5; 65/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.791 total time=   0.3s\n",
      "[CV 5/5; 65/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 65/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=100;, score=0.834 total time=   0.2s\n",
      "[CV 1/5; 66/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 66/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.876 total time=   0.4s\n",
      "[CV 2/5; 66/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 66/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.867 total time=   0.4s\n",
      "[CV 3/5; 66/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 66/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.805 total time=   0.5s\n",
      "[CV 4/5; 66/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 66/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.794 total time=   0.5s\n",
      "[CV 5/5; 66/81] START learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 66/81] END learning_rate=0.5, max_depth=5, min_samples_split=2, n_estimators=150;, score=0.836 total time=   0.4s\n",
      "[CV 1/5; 67/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 67/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.869 total time=   0.1s\n",
      "[CV 2/5; 67/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 67/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.849 total time=   0.1s\n",
      "[CV 3/5; 67/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 67/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.817 total time=   0.1s\n",
      "[CV 4/5; 67/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 67/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.798 total time=   0.1s\n",
      "[CV 5/5; 67/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 67/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=50;, score=0.846 total time=   0.1s\n",
      "[CV 1/5; 68/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 68/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.879 total time=   0.2s\n",
      "[CV 2/5; 68/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 68/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.854 total time=   0.2s\n",
      "[CV 3/5; 68/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 68/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.814 total time=   0.4s\n",
      "[CV 4/5; 68/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 68/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.794 total time=   0.2s\n",
      "[CV 5/5; 68/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 68/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=100;, score=0.837 total time=   0.2s\n",
      "[CV 1/5; 69/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 69/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.868 total time=   0.3s\n",
      "[CV 2/5; 69/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 69/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.855 total time=   0.3s\n",
      "[CV 3/5; 69/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 69/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.808 total time=   0.3s\n",
      "[CV 4/5; 69/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 69/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.807 total time=   0.6s\n",
      "[CV 5/5; 69/81] START learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 69/81] END learning_rate=0.5, max_depth=5, min_samples_split=5, n_estimators=150;, score=0.838 total time=   0.5s\n",
      "[CV 1/5; 70/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 70/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.856 total time=   0.1s\n",
      "[CV 2/5; 70/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 70/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.863 total time=   0.1s\n",
      "[CV 3/5; 70/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 70/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.800 total time=   0.3s\n",
      "[CV 4/5; 70/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 70/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.783 total time=   0.2s\n",
      "[CV 5/5; 70/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 70/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=50;, score=0.842 total time=   0.1s\n",
      "[CV 1/5; 71/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 71/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.867 total time=   0.3s\n",
      "[CV 2/5; 71/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 71/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.853 total time=   0.2s\n",
      "[CV 3/5; 71/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 71/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.803 total time=   0.2s\n",
      "[CV 4/5; 71/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 71/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.772 total time=   0.3s\n",
      "[CV 5/5; 71/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 71/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=100;, score=0.837 total time=   0.2s\n",
      "[CV 1/5; 72/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 72/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.867 total time=   0.3s\n",
      "[CV 2/5; 72/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 2/5; 72/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.851 total time=   0.3s\n",
      "[CV 3/5; 72/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 72/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.806 total time=   0.4s\n",
      "[CV 4/5; 72/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 72/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.771 total time=   0.4s\n",
      "[CV 5/5; 72/81] START learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 72/81] END learning_rate=0.5, max_depth=5, min_samples_split=10, n_estimators=150;, score=0.833 total time=   0.3s\n",
      "[CV 1/5; 73/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 1/5; 73/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.876 total time=   0.3s\n",
      "[CV 2/5; 73/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 2/5; 73/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.854 total time=   0.3s\n",
      "[CV 3/5; 73/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 73/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.822 total time=   0.3s\n",
      "[CV 4/5; 73/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 4/5; 73/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.804 total time=   0.3s\n",
      "[CV 5/5; 73/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50\n",
      "[CV 5/5; 73/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=50;, score=0.858 total time=   0.5s\n",
      "[CV 1/5; 74/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 1/5; 74/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.877 total time=   0.6s\n",
      "[CV 2/5; 74/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 2/5; 74/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.847 total time=   0.5s\n",
      "[CV 3/5; 74/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 3/5; 74/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.811 total time=   0.5s\n",
      "[CV 4/5; 74/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 4/5; 74/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.796 total time=   0.6s\n",
      "[CV 5/5; 74/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100\n",
      "[CV 5/5; 74/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=100;, score=0.833 total time=   0.6s\n",
      "[CV 1/5; 75/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 1/5; 75/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.872 total time=   0.9s\n",
      "[CV 2/5; 75/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 2/5; 75/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.841 total time=   0.8s\n",
      "[CV 3/5; 75/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 3/5; 75/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.808 total time=   0.8s\n",
      "[CV 4/5; 75/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 4/5; 75/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.797 total time=   0.7s\n",
      "[CV 5/5; 75/81] START learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150\n",
      "[CV 5/5; 75/81] END learning_rate=0.5, max_depth=7, min_samples_split=2, n_estimators=150;, score=0.817 total time=   0.8s\n",
      "[CV 1/5; 76/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 1/5; 76/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.868 total time=   0.2s\n",
      "[CV 2/5; 76/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 2/5; 76/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.853 total time=   0.2s\n",
      "[CV 3/5; 76/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 3/5; 76/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.807 total time=   0.2s\n",
      "[CV 4/5; 76/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 4/5; 76/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.821 total time=   0.1s\n",
      "[CV 5/5; 76/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50\n",
      "[CV 5/5; 76/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=50;, score=0.833 total time=   0.2s\n",
      "[CV 1/5; 77/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 1/5; 77/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.870 total time=   0.4s\n",
      "[CV 2/5; 77/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 2/5; 77/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.839 total time=   0.4s\n",
      "[CV 3/5; 77/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 3/5; 77/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.807 total time=   0.4s\n",
      "[CV 4/5; 77/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 4/5; 77/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.796 total time=   0.4s\n",
      "[CV 5/5; 77/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100\n",
      "[CV 5/5; 77/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=100;, score=0.836 total time=   0.5s\n",
      "[CV 1/5; 78/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 1/5; 78/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.859 total time=   0.7s\n",
      "[CV 2/5; 78/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 2/5; 78/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.844 total time=   0.6s\n",
      "[CV 3/5; 78/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 3/5; 78/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.804 total time=   0.6s\n",
      "[CV 4/5; 78/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 4/5; 78/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.782 total time=   0.5s\n",
      "[CV 5/5; 78/81] START learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150\n",
      "[CV 5/5; 78/81] END learning_rate=0.5, max_depth=7, min_samples_split=5, n_estimators=150;, score=0.832 total time=   0.8s\n",
      "[CV 1/5; 79/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 1/5; 79/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.889 total time=   0.3s\n",
      "[CV 2/5; 79/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 2/5; 79/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.845 total time=   0.2s\n",
      "[CV 3/5; 79/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 3/5; 79/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.812 total time=   0.1s\n",
      "[CV 4/5; 79/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 4/5; 79/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.792 total time=   0.1s\n",
      "[CV 5/5; 79/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50\n",
      "[CV 5/5; 79/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=50;, score=0.849 total time=   0.2s\n",
      "[CV 1/5; 80/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 1/5; 80/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.880 total time=   0.3s\n",
      "[CV 2/5; 80/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 2/5; 80/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.849 total time=   0.3s\n",
      "[CV 3/5; 80/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 3/5; 80/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.810 total time=   0.3s\n",
      "[CV 4/5; 80/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 4/5; 80/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.795 total time=   0.3s\n",
      "[CV 5/5; 80/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100\n",
      "[CV 5/5; 80/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=100;, score=0.831 total time=   0.4s\n",
      "[CV 1/5; 81/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 1/5; 81/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.879 total time=   0.6s\n",
      "[CV 2/5; 81/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 81/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.847 total time=   0.5s\n",
      "[CV 3/5; 81/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 3/5; 81/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.811 total time=   0.7s\n",
      "[CV 4/5; 81/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 4/5; 81/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.789 total time=   0.6s\n",
      "[CV 5/5; 81/81] START learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150\n",
      "[CV 5/5; 81/81] END learning_rate=0.5, max_depth=7, min_samples_split=10, n_estimators=150;, score=0.829 total time=   0.7s\n",
      "Fitting 5 folds for each of 108 candidates, totalling 540 fits\n",
      "[CV 1/5; 1/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 1/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.780 total time=   0.0s\n",
      "[CV 2/5; 1/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 1/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.784 total time=   0.0s\n",
      "[CV 3/5; 1/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 1/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.731 total time=   0.0s\n",
      "[CV 4/5; 1/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 1/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.731 total time=   0.0s\n",
      "[CV 5/5; 1/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 1/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.840 total time=   0.0s\n",
      "[CV 1/5; 2/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 2/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.777 total time=   0.0s\n",
      "[CV 2/5; 2/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 2/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.788 total time=   0.0s\n",
      "[CV 3/5; 2/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 2/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 2/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 2/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.752 total time=   0.0s\n",
      "[CV 5/5; 2/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 2/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.800 total time=   0.0s\n",
      "[CV 1/5; 3/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 3/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 3/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 3/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.792 total time=   0.0s\n",
      "[CV 3/5; 3/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 3/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.750 total time=   0.0s\n",
      "[CV 4/5; 3/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 3/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.720 total time=   0.0s\n",
      "[CV 5/5; 3/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 3/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.849 total time=   0.0s\n",
      "[CV 1/5; 4/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 4/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.756 total time=   0.0s\n",
      "[CV 2/5; 4/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 4/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.822 total time=   0.0s\n",
      "[CV 3/5; 4/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 4/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.814 total time=   0.0s\n",
      "[CV 4/5; 4/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 4/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.772 total time=   0.0s\n",
      "[CV 5/5; 4/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 4/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.825 total time=   0.0s\n",
      "[CV 1/5; 5/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 5/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.816 total time=   0.0s\n",
      "[CV 2/5; 5/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 5/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.801 total time=   0.0s\n",
      "[CV 3/5; 5/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 5/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.763 total time=   0.0s\n",
      "[CV 4/5; 5/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 5/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.746 total time=   0.0s\n",
      "[CV 5/5; 5/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 5/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.839 total time=   0.0s\n",
      "[CV 1/5; 6/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 6/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.833 total time=   0.0s\n",
      "[CV 2/5; 6/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 6/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 3/5; 6/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 6/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.746 total time=   0.0s\n",
      "[CV 4/5; 6/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 6/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.781 total time=   0.0s\n",
      "[CV 5/5; 6/108] START criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 6/108] END criterion=gini, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.821 total time=   0.0s\n",
      "[CV 1/5; 7/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 7/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 7/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 7/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.789 total time=   0.0s\n",
      "[CV 3/5; 7/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 7/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.740 total time=   0.0s\n",
      "[CV 4/5; 7/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 7/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 7/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 7/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.821 total time=   0.0s\n",
      "[CV 1/5; 8/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 8/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 2/5; 8/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 8/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.800 total time=   0.0s\n",
      "[CV 3/5; 8/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 8/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 4/5; 8/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 8/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.768 total time=   0.0s\n",
      "[CV 5/5; 8/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 8/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.802 total time=   0.0s\n",
      "[CV 1/5; 9/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 9/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.788 total time=   0.0s\n",
      "[CV 2/5; 9/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 9/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 9/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 9/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.754 total time=   0.0s\n",
      "[CV 4/5; 9/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 9/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.751 total time=   0.0s\n",
      "[CV 5/5; 9/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 5/5; 9/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.822 total time=   0.0s\n",
      "[CV 1/5; 10/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 10/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.796 total time=   0.0s\n",
      "[CV 2/5; 10/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 10/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.779 total time=   0.0s\n",
      "[CV 3/5; 10/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 10/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.786 total time=   0.0s\n",
      "[CV 4/5; 10/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 10/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.804 total time=   0.0s\n",
      "[CV 5/5; 10/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 10/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 1/5; 11/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 11/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.813 total time=   0.0s\n",
      "[CV 2/5; 11/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 11/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.808 total time=   0.0s\n",
      "[CV 3/5; 11/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 11/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.744 total time=   0.0s\n",
      "[CV 4/5; 11/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 11/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.738 total time=   0.0s\n",
      "[CV 5/5; 11/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 11/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.818 total time=   0.0s\n",
      "[CV 1/5; 12/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 12/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.817 total time=   0.0s\n",
      "[CV 2/5; 12/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 12/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.828 total time=   0.0s\n",
      "[CV 3/5; 12/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 12/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.741 total time=   0.0s\n",
      "[CV 4/5; 12/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 12/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 12/108] START criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 12/108] END criterion=gini, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.771 total time=   0.0s\n",
      "[CV 1/5; 13/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 13/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.839 total time=   0.0s\n",
      "[CV 2/5; 13/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 13/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.793 total time=   0.0s\n",
      "[CV 3/5; 13/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 13/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.761 total time=   0.0s\n",
      "[CV 4/5; 13/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 13/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 5/5; 13/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 13/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 1/5; 14/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 14/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.858 total time=   0.0s\n",
      "[CV 2/5; 14/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 14/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.836 total time=   0.0s\n",
      "[CV 3/5; 14/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 14/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.753 total time=   0.0s\n",
      "[CV 4/5; 14/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 14/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.782 total time=   0.0s\n",
      "[CV 5/5; 14/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 14/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 1/5; 15/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 15/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.839 total time=   0.0s\n",
      "[CV 2/5; 15/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 15/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.793 total time=   0.0s\n",
      "[CV 3/5; 15/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 15/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.761 total time=   0.0s\n",
      "[CV 4/5; 15/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 15/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 5/5; 15/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 15/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 1/5; 16/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 16/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.858 total time=   0.0s\n",
      "[CV 2/5; 16/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 16/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.836 total time=   0.0s\n",
      "[CV 3/5; 16/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 16/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.753 total time=   0.0s\n",
      "[CV 4/5; 16/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 16/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.782 total time=   0.0s\n",
      "[CV 5/5; 16/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 16/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 1/5; 17/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 17/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.851 total time=   0.0s\n",
      "[CV 2/5; 17/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 17/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.804 total time=   0.0s\n",
      "[CV 3/5; 17/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 17/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.761 total time=   0.0s\n",
      "[CV 4/5; 17/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 17/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.737 total time=   0.0s\n",
      "[CV 5/5; 17/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 17/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.806 total time=   0.0s\n",
      "[CV 1/5; 18/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 18/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.866 total time=   0.0s\n",
      "[CV 2/5; 18/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 18/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.836 total time=   0.0s\n",
      "[CV 3/5; 18/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 18/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.744 total time=   0.0s\n",
      "[CV 4/5; 18/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 18/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.749 total time=   0.0s\n",
      "[CV 5/5; 18/108] START criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 18/108] END criterion=gini, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.807 total time=   0.0s\n",
      "[CV 1/5; 19/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 19/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.753 total time=   0.0s\n",
      "[CV 2/5; 19/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 19/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.738 total time=   0.0s\n",
      "[CV 3/5; 19/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 19/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.710 total time=   0.0s\n",
      "[CV 4/5; 19/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 19/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.695 total time=   0.0s\n",
      "[CV 5/5; 19/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 19/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.760 total time=   0.0s\n",
      "[CV 1/5; 20/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 20/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.751 total time=   0.0s\n",
      "[CV 2/5; 20/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 20/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.715 total time=   0.0s\n",
      "[CV 3/5; 20/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 20/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.724 total time=   0.0s\n",
      "[CV 4/5; 20/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 20/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.717 total time=   0.0s\n",
      "[CV 5/5; 20/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 20/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.693 total time=   0.0s\n",
      "[CV 1/5; 21/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 21/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.771 total time=   0.0s\n",
      "[CV 2/5; 21/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 21/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 3/5; 21/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 21/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.731 total time=   0.0s\n",
      "[CV 4/5; 21/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 21/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 21/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 21/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.768 total time=   0.0s\n",
      "[CV 1/5; 22/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 22/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.796 total time=   0.0s\n",
      "[CV 2/5; 22/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 22/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.776 total time=   0.0s\n",
      "[CV 3/5; 22/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 22/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.818 total time=   0.0s\n",
      "[CV 4/5; 22/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 22/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.798 total time=   0.0s\n",
      "[CV 5/5; 22/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 22/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.737 total time=   0.0s\n",
      "[CV 1/5; 23/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 23/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.810 total time=   0.0s\n",
      "[CV 2/5; 23/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 23/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 3/5; 23/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 23/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.718 total time=   0.0s\n",
      "[CV 4/5; 23/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 23/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.700 total time=   0.0s\n",
      "[CV 5/5; 23/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 23/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.811 total time=   0.0s\n",
      "[CV 1/5; 24/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 24/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.808 total time=   0.0s\n",
      "[CV 2/5; 24/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 24/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.763 total time=   0.0s\n",
      "[CV 3/5; 24/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 24/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.720 total time=   0.0s\n",
      "[CV 4/5; 24/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 24/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 24/108] START criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 24/108] END criterion=gini, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.822 total time=   0.0s\n",
      "[CV 1/5; 25/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 25/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 25/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 25/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.751 total time=   0.0s\n",
      "[CV 3/5; 25/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 25/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.708 total time=   0.0s\n",
      "[CV 4/5; 25/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 25/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.717 total time=   0.0s\n",
      "[CV 5/5; 25/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 25/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.777 total time=   0.0s\n",
      "[CV 1/5; 26/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 26/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.823 total time=   0.0s\n",
      "[CV 2/5; 26/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 26/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 3/5; 26/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 26/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.722 total time=   0.0s\n",
      "[CV 4/5; 26/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 26/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.708 total time=   0.0s\n",
      "[CV 5/5; 26/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 26/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.718 total time=   0.0s\n",
      "[CV 1/5; 27/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 27/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 27/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 27/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.745 total time=   0.0s\n",
      "[CV 3/5; 27/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 27/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.732 total time=   0.0s\n",
      "[CV 4/5; 27/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 27/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.743 total time=   0.0s\n",
      "[CV 5/5; 27/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 27/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.774 total time=   0.0s\n",
      "[CV 1/5; 28/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 28/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 28/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 28/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 3/5; 28/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 28/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 28/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 28/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 5/5; 28/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 28/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.737 total time=   0.0s\n",
      "[CV 1/5; 29/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 29/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.797 total time=   0.0s\n",
      "[CV 2/5; 29/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 29/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.776 total time=   0.0s\n",
      "[CV 3/5; 29/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 29/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.719 total time=   0.0s\n",
      "[CV 4/5; 29/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 29/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.733 total time=   0.0s\n",
      "[CV 5/5; 29/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 29/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.802 total time=   0.0s\n",
      "[CV 1/5; 30/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 30/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.838 total time=   0.0s\n",
      "[CV 2/5; 30/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 30/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.808 total time=   0.0s\n",
      "[CV 3/5; 30/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 30/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 30/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 30/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.772 total time=   0.0s\n",
      "[CV 5/5; 30/108] START criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 30/108] END criterion=gini, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 31/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 31/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 2/5; 31/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 31/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 31/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 31/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 31/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 31/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 5/5; 31/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 31/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.813 total time=   0.0s\n",
      "[CV 1/5; 32/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 32/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 2/5; 32/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 32/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 3/5; 32/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 32/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 4/5; 32/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 32/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 5/5; 32/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 32/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.792 total time=   0.0s\n",
      "[CV 1/5; 33/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 33/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 2/5; 33/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 33/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 33/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 33/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 33/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 33/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 5/5; 33/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 33/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.813 total time=   0.0s\n",
      "[CV 1/5; 34/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 34/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 2/5; 34/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 34/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 3/5; 34/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 34/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 4/5; 34/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 34/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 5/5; 34/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 34/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.792 total time=   0.0s\n",
      "[CV 1/5; 35/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 35/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.834 total time=   0.0s\n",
      "[CV 2/5; 35/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 35/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.800 total time=   0.0s\n",
      "[CV 3/5; 35/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 35/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.737 total time=   0.0s\n",
      "[CV 4/5; 35/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 35/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.735 total time=   0.0s\n",
      "[CV 5/5; 35/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 35/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 36/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 36/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.848 total time=   0.0s\n",
      "[CV 2/5; 36/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 36/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.826 total time=   0.0s\n",
      "[CV 3/5; 36/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 36/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 36/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 36/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 36/108] START criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 36/108] END criterion=gini, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.793 total time=   0.0s\n",
      "[CV 1/5; 37/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 37/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.754 total time=   0.0s\n",
      "[CV 2/5; 37/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 37/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.738 total time=   0.0s\n",
      "[CV 3/5; 37/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 37/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.710 total time=   0.0s\n",
      "[CV 4/5; 37/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 37/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.695 total time=   0.0s\n",
      "[CV 5/5; 37/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 37/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.760 total time=   0.0s\n",
      "[CV 1/5; 38/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 38/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.751 total time=   0.0s\n",
      "[CV 2/5; 38/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 38/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.715 total time=   0.0s\n",
      "[CV 3/5; 38/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 38/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.724 total time=   0.0s\n",
      "[CV 4/5; 38/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 38/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.717 total time=   0.0s\n",
      "[CV 5/5; 38/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 38/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.693 total time=   0.0s\n",
      "[CV 1/5; 39/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 39/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 2/5; 39/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 39/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 3/5; 39/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 39/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.731 total time=   0.0s\n",
      "[CV 4/5; 39/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5; 39/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 39/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 39/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.768 total time=   0.0s\n",
      "[CV 1/5; 40/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 40/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.796 total time=   0.0s\n",
      "[CV 2/5; 40/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 40/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.776 total time=   0.0s\n",
      "[CV 3/5; 40/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 40/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.818 total time=   0.0s\n",
      "[CV 4/5; 40/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 40/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.798 total time=   0.0s\n",
      "[CV 5/5; 40/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 40/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.737 total time=   0.0s\n",
      "[CV 1/5; 41/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 41/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.797 total time=   0.0s\n",
      "[CV 2/5; 41/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 41/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 3/5; 41/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 41/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.718 total time=   0.0s\n",
      "[CV 4/5; 41/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 41/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.700 total time=   0.0s\n",
      "[CV 5/5; 41/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 41/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.811 total time=   0.0s\n",
      "[CV 1/5; 42/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 42/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.808 total time=   0.0s\n",
      "[CV 2/5; 42/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 42/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.763 total time=   0.0s\n",
      "[CV 3/5; 42/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 42/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.720 total time=   0.0s\n",
      "[CV 4/5; 42/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 42/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 42/108] START criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 42/108] END criterion=gini, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.822 total time=   0.0s\n",
      "[CV 1/5; 43/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 43/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 43/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 43/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.751 total time=   0.0s\n",
      "[CV 3/5; 43/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 43/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.708 total time=   0.0s\n",
      "[CV 4/5; 43/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 43/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.717 total time=   0.0s\n",
      "[CV 5/5; 43/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 43/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.777 total time=   0.0s\n",
      "[CV 1/5; 44/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 44/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.823 total time=   0.0s\n",
      "[CV 2/5; 44/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 44/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 3/5; 44/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 44/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.722 total time=   0.0s\n",
      "[CV 4/5; 44/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 44/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.708 total time=   0.0s\n",
      "[CV 5/5; 44/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 44/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.718 total time=   0.0s\n",
      "[CV 1/5; 45/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 45/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 45/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 45/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.745 total time=   0.0s\n",
      "[CV 3/5; 45/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 45/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.732 total time=   0.0s\n",
      "[CV 4/5; 45/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 45/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.743 total time=   0.0s\n",
      "[CV 5/5; 45/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 45/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.774 total time=   0.0s\n",
      "[CV 1/5; 46/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 46/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.775 total time=   0.0s\n",
      "[CV 2/5; 46/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 46/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 3/5; 46/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 46/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 46/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 46/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 5/5; 46/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 46/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.737 total time=   0.0s\n",
      "[CV 1/5; 47/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 47/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.797 total time=   0.0s\n",
      "[CV 2/5; 47/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 47/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.776 total time=   0.0s\n",
      "[CV 3/5; 47/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 47/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.719 total time=   0.0s\n",
      "[CV 4/5; 47/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 47/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.733 total time=   0.0s\n",
      "[CV 5/5; 47/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 47/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.802 total time=   0.0s\n",
      "[CV 1/5; 48/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 48/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.838 total time=   0.0s\n",
      "[CV 2/5; 48/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 48/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.808 total time=   0.0s\n",
      "[CV 3/5; 48/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 48/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 48/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 48/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.772 total time=   0.0s\n",
      "[CV 5/5; 48/108] START criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 48/108] END criterion=gini, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 49/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 49/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 2/5; 49/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 49/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 49/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 49/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 49/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 49/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 5/5; 49/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 49/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.813 total time=   0.0s\n",
      "[CV 1/5; 50/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 50/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 2/5; 50/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 50/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 3/5; 50/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 50/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 4/5; 50/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 50/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 5/5; 50/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 50/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.792 total time=   0.0s\n",
      "[CV 1/5; 51/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 51/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.826 total time=   0.0s\n",
      "[CV 2/5; 51/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 51/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 51/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 51/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.755 total time=   0.0s\n",
      "[CV 4/5; 51/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 51/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 5/5; 51/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 51/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.813 total time=   0.0s\n",
      "[CV 1/5; 52/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 52/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 2/5; 52/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 52/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.845 total time=   0.0s\n",
      "[CV 3/5; 52/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 52/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 4/5; 52/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 52/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 5/5; 52/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 52/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.792 total time=   0.0s\n",
      "[CV 1/5; 53/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 53/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.834 total time=   0.0s\n",
      "[CV 2/5; 53/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 53/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.800 total time=   0.0s\n",
      "[CV 3/5; 53/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 53/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.737 total time=   0.0s\n",
      "[CV 4/5; 53/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 53/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.735 total time=   0.0s\n",
      "[CV 5/5; 53/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 53/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 54/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 54/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.848 total time=   0.0s\n",
      "[CV 2/5; 54/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 54/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.826 total time=   0.0s\n",
      "[CV 3/5; 54/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 54/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.712 total time=   0.0s\n",
      "[CV 4/5; 54/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 54/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 5/5; 54/108] START criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 54/108] END criterion=gini, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.793 total time=   0.0s\n",
      "[CV 1/5; 55/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 55/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.764 total time=   0.0s\n",
      "[CV 2/5; 55/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 55/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.771 total time=   0.0s\n",
      "[CV 3/5; 55/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 55/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.776 total time=   0.0s\n",
      "[CV 4/5; 55/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 55/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 5/5; 55/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 55/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.824 total time=   0.0s\n",
      "[CV 1/5; 56/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 56/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.793 total time=   0.0s\n",
      "[CV 2/5; 56/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 56/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.816 total time=   0.0s\n",
      "[CV 3/5; 56/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 56/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.812 total time=   0.0s\n",
      "[CV 4/5; 56/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 56/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.764 total time=   0.0s\n",
      "[CV 5/5; 56/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 56/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.833 total time=   0.0s\n",
      "[CV 1/5; 57/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 57/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.785 total time=   0.0s\n",
      "[CV 2/5; 57/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 57/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.776 total time=   0.0s\n",
      "[CV 3/5; 57/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 57/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.770 total time=   0.0s\n",
      "[CV 4/5; 57/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 57/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.742 total time=   0.0s\n",
      "[CV 5/5; 57/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 57/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.823 total time=   0.0s\n",
      "[CV 1/5; 58/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 58/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 2/5; 58/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 58/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.813 total time=   0.0s\n",
      "[CV 3/5; 58/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 58/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 4/5; 58/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 58/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.787 total time=   0.0s\n",
      "[CV 5/5; 58/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 58/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 1/5; 59/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 59/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.774 total time=   0.0s\n",
      "[CV 2/5; 59/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 59/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.795 total time=   0.0s\n",
      "[CV 3/5; 59/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 59/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.756 total time=   0.0s\n",
      "[CV 4/5; 59/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 59/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.719 total time=   0.0s\n",
      "[CV 5/5; 59/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 59/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.827 total time=   0.0s\n",
      "[CV 1/5; 60/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 60/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.814 total time=   0.0s\n",
      "[CV 2/5; 60/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 60/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.824 total time=   0.0s\n",
      "[CV 3/5; 60/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 60/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.775 total time=   0.0s\n",
      "[CV 4/5; 60/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 60/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.749 total time=   0.0s\n",
      "[CV 5/5; 60/108] START criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 60/108] END criterion=entropy, max_depth=10, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.815 total time=   0.0s\n",
      "[CV 1/5; 61/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 61/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.767 total time=   0.0s\n",
      "[CV 2/5; 61/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 61/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.775 total time=   0.0s\n",
      "[CV 3/5; 61/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 61/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 4/5; 61/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 61/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.724 total time=   0.0s\n",
      "[CV 5/5; 61/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 61/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.822 total time=   0.0s\n",
      "[CV 1/5; 62/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 62/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.825 total time=   0.0s\n",
      "[CV 2/5; 62/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 62/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.759 total time=   0.0s\n",
      "[CV 3/5; 62/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 3/5; 62/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 4/5; 62/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 62/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.763 total time=   0.0s\n",
      "[CV 5/5; 62/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 62/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.772 total time=   0.0s\n",
      "[CV 1/5; 63/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 63/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.777 total time=   0.0s\n",
      "[CV 2/5; 63/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 63/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.760 total time=   0.0s\n",
      "[CV 3/5; 63/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 63/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 63/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 63/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.733 total time=   0.0s\n",
      "[CV 5/5; 63/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 63/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 64/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 64/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.807 total time=   0.0s\n",
      "[CV 2/5; 64/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 64/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 3/5; 64/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 64/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.756 total time=   0.0s\n",
      "[CV 4/5; 64/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 64/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.779 total time=   0.0s\n",
      "[CV 5/5; 64/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 64/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 1/5; 65/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 65/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.771 total time=   0.0s\n",
      "[CV 2/5; 65/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 65/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.792 total time=   0.0s\n",
      "[CV 3/5; 65/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 65/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.756 total time=   0.0s\n",
      "[CV 4/5; 65/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 65/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.724 total time=   0.0s\n",
      "[CV 5/5; 65/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 65/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.821 total time=   0.0s\n",
      "[CV 1/5; 66/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 66/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.811 total time=   0.0s\n",
      "[CV 2/5; 66/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 66/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.773 total time=   0.0s\n",
      "[CV 3/5; 66/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 66/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.810 total time=   0.0s\n",
      "[CV 4/5; 66/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 66/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.750 total time=   0.0s\n",
      "[CV 5/5; 66/108] START criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 66/108] END criterion=entropy, max_depth=10, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.763 total time=   0.0s\n",
      "[CV 1/5; 67/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 67/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.831 total time=   0.0s\n",
      "[CV 2/5; 67/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 67/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 67/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 67/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 67/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 67/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.712 total time=   0.0s\n",
      "[CV 5/5; 67/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 67/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.806 total time=   0.0s\n",
      "[CV 1/5; 68/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 68/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.788 total time=   0.0s\n",
      "[CV 2/5; 68/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 68/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.832 total time=   0.0s\n",
      "[CV 3/5; 68/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 68/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.809 total time=   0.0s\n",
      "[CV 4/5; 68/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 68/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.766 total time=   0.0s\n",
      "[CV 5/5; 68/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 68/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.780 total time=   0.0s\n",
      "[CV 1/5; 69/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 69/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.831 total time=   0.0s\n",
      "[CV 2/5; 69/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 69/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 69/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 69/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 69/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 69/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.712 total time=   0.0s\n",
      "[CV 5/5; 69/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 69/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.806 total time=   0.0s\n",
      "[CV 1/5; 70/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 70/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.788 total time=   0.0s\n",
      "[CV 2/5; 70/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 70/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.832 total time=   0.0s\n",
      "[CV 3/5; 70/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 70/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.809 total time=   0.0s\n",
      "[CV 4/5; 70/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 70/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.766 total time=   0.0s\n",
      "[CV 5/5; 70/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 70/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.780 total time=   0.0s\n",
      "[CV 1/5; 71/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 71/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.831 total time=   0.0s\n",
      "[CV 2/5; 71/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 71/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.791 total time=   0.0s\n",
      "[CV 3/5; 71/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 71/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 71/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 71/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.711 total time=   0.0s\n",
      "[CV 5/5; 71/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 71/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.822 total time=   0.0s\n",
      "[CV 1/5; 72/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 72/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.840 total time=   0.0s\n",
      "[CV 2/5; 72/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 72/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 3/5; 72/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 72/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.811 total time=   0.0s\n",
      "[CV 4/5; 72/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 72/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 5/5; 72/108] START criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 72/108] END criterion=entropy, max_depth=10, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.815 total time=   0.0s\n",
      "[CV 1/5; 73/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 73/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.738 total time=   0.0s\n",
      "[CV 2/5; 73/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 73/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.726 total time=   0.0s\n",
      "[CV 3/5; 73/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 73/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.752 total time=   0.0s\n",
      "[CV 4/5; 73/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 73/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 73/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 73/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 1/5; 74/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 74/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.822 total time=   0.0s\n",
      "[CV 2/5; 74/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 74/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.750 total time=   0.0s\n",
      "[CV 3/5; 74/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 74/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.732 total time=   0.0s\n",
      "[CV 4/5; 74/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 74/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.760 total time=   0.0s\n",
      "[CV 5/5; 74/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 74/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.730 total time=   0.0s\n",
      "[CV 1/5; 75/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 75/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 2/5; 75/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 75/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.744 total time=   0.0s\n",
      "[CV 3/5; 75/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 75/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 4/5; 75/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 75/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.712 total time=   0.0s\n",
      "[CV 5/5; 75/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 75/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.745 total time=   0.0s\n",
      "[CV 1/5; 76/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 76/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 2/5; 76/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 76/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.748 total time=   0.0s\n",
      "[CV 3/5; 76/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 76/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.734 total time=   0.0s\n",
      "[CV 4/5; 76/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 76/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.724 total time=   0.0s\n",
      "[CV 5/5; 76/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 76/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.733 total time=   0.0s\n",
      "[CV 1/5; 77/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 77/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.755 total time=   0.0s\n",
      "[CV 2/5; 77/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 77/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.766 total time=   0.0s\n",
      "[CV 3/5; 77/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 77/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.751 total time=   0.0s\n",
      "[CV 4/5; 77/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 77/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.707 total time=   0.0s\n",
      "[CV 5/5; 77/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 77/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 78/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 78/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.841 total time=   0.0s\n",
      "[CV 2/5; 78/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 78/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 3/5; 78/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 78/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.785 total time=   0.0s\n",
      "[CV 4/5; 78/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 78/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.743 total time=   0.0s\n",
      "[CV 5/5; 78/108] START criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 78/108] END criterion=entropy, max_depth=20, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 1/5; 79/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 79/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.740 total time=   0.0s\n",
      "[CV 2/5; 79/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 79/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.730 total time=   0.0s\n",
      "[CV 3/5; 79/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 79/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.771 total time=   0.0s\n",
      "[CV 4/5; 79/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 79/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.671 total time=   0.0s\n",
      "[CV 5/5; 79/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 79/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.752 total time=   0.0s\n",
      "[CV 1/5; 80/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 80/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.813 total time=   0.0s\n",
      "[CV 2/5; 80/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 80/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 3/5; 80/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 80/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.741 total time=   0.0s\n",
      "[CV 4/5; 80/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 80/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 80/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 80/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.723 total time=   0.0s\n",
      "[CV 1/5; 81/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 81/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.750 total time=   0.0s\n",
      "[CV 2/5; 81/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 81/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.723 total time=   0.0s\n",
      "[CV 3/5; 81/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 81/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.786 total time=   0.0s\n",
      "[CV 4/5; 81/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 81/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.711 total time=   0.0s\n",
      "[CV 5/5; 81/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 81/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 1/5; 82/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 82/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 2/5; 82/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 82/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.827 total time=   0.0s\n",
      "[CV 3/5; 82/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 82/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.729 total time=   0.0s\n",
      "[CV 4/5; 82/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 82/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.764 total time=   0.0s\n",
      "[CV 5/5; 82/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 82/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.740 total time=   0.0s\n",
      "[CV 1/5; 83/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 83/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 2/5; 83/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 83/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.759 total time=   0.0s\n",
      "[CV 3/5; 83/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 83/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.758 total time=   0.0s\n",
      "[CV 4/5; 83/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 83/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.709 total time=   0.0s\n",
      "[CV 5/5; 83/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 83/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.778 total time=   0.0s\n",
      "[CV 1/5; 84/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 84/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.815 total time=   0.0s\n",
      "[CV 2/5; 84/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 84/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 3/5; 84/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 84/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.811 total time=   0.0s\n",
      "[CV 4/5; 84/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 84/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.750 total time=   0.0s\n",
      "[CV 5/5; 84/108] START criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 84/108] END criterion=entropy, max_depth=20, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.817 total time=   0.0s\n",
      "[CV 1/5; 85/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 85/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.818 total time=   0.0s\n",
      "[CV 2/5; 85/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 85/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.781 total time=   0.0s\n",
      "[CV 3/5; 85/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 85/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 85/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 85/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.722 total time=   0.0s\n",
      "[CV 5/5; 85/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 85/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 86/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 86/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 86/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 86/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.816 total time=   0.0s\n",
      "[CV 3/5; 86/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 86/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 86/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 86/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.781 total time=   0.0s\n",
      "[CV 5/5; 86/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 86/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.790 total time=   0.0s\n",
      "[CV 1/5; 87/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 87/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.818 total time=   0.0s\n",
      "[CV 2/5; 87/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 87/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.781 total time=   0.0s\n",
      "[CV 3/5; 87/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 87/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 87/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 87/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.722 total time=   0.0s\n",
      "[CV 5/5; 87/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 87/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 88/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 1/5; 88/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 88/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 88/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.816 total time=   0.0s\n",
      "[CV 3/5; 88/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 88/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 88/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 88/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.781 total time=   0.0s\n",
      "[CV 5/5; 88/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 88/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.790 total time=   0.0s\n",
      "[CV 1/5; 89/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 89/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.817 total time=   0.0s\n",
      "[CV 2/5; 89/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 89/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.785 total time=   0.0s\n",
      "[CV 3/5; 89/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 89/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 4/5; 89/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 89/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.715 total time=   0.0s\n",
      "[CV 5/5; 89/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 89/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 90/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 90/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.850 total time=   0.0s\n",
      "[CV 2/5; 90/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 90/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 3/5; 90/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 90/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 4/5; 90/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 90/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.768 total time=   0.0s\n",
      "[CV 5/5; 90/108] START criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 90/108] END criterion=entropy, max_depth=20, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.776 total time=   0.0s\n",
      "[CV 1/5; 91/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 91/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.732 total time=   0.0s\n",
      "[CV 2/5; 91/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 91/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.726 total time=   0.0s\n",
      "[CV 3/5; 91/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 91/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.752 total time=   0.0s\n",
      "[CV 4/5; 91/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 91/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.707 total time=   0.0s\n",
      "[CV 5/5; 91/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 91/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=best;, score=0.747 total time=   0.0s\n",
      "[CV 1/5; 92/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 92/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.780 total time=   0.0s\n",
      "[CV 2/5; 92/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 92/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.761 total time=   0.0s\n",
      "[CV 3/5; 92/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 92/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.732 total time=   0.0s\n",
      "[CV 4/5; 92/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 92/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.760 total time=   0.0s\n",
      "[CV 5/5; 92/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 92/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=2, splitter=random;, score=0.730 total time=   0.0s\n",
      "[CV 1/5; 93/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 93/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.754 total time=   0.0s\n",
      "[CV 2/5; 93/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 93/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.744 total time=   0.0s\n",
      "[CV 3/5; 93/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 93/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.769 total time=   0.0s\n",
      "[CV 4/5; 93/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 93/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.706 total time=   0.0s\n",
      "[CV 5/5; 93/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 93/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=best;, score=0.745 total time=   0.0s\n",
      "[CV 1/5; 94/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 94/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 2/5; 94/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 94/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.782 total time=   0.0s\n",
      "[CV 3/5; 94/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 94/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.734 total time=   0.0s\n",
      "[CV 4/5; 94/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 94/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.724 total time=   0.0s\n",
      "[CV 5/5; 94/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 94/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=5, splitter=random;, score=0.733 total time=   0.0s\n",
      "[CV 1/5; 95/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 95/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.752 total time=   0.0s\n",
      "[CV 2/5; 95/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 95/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.766 total time=   0.0s\n",
      "[CV 3/5; 95/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 95/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.751 total time=   0.0s\n",
      "[CV 4/5; 95/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 95/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.707 total time=   0.0s\n",
      "[CV 5/5; 95/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 95/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 96/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 96/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.841 total time=   0.0s\n",
      "[CV 2/5; 96/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 96/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 3/5; 96/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 96/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.785 total time=   0.0s\n",
      "[CV 4/5; 96/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 96/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.743 total time=   0.0s\n",
      "[CV 5/5; 96/108] START criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 96/108] END criterion=entropy, max_depth=30, min_samples_leaf=1, min_samples_split=10, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 1/5; 97/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 97/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.740 total time=   0.0s\n",
      "[CV 2/5; 97/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 97/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.730 total time=   0.0s\n",
      "[CV 3/5; 97/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 97/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.771 total time=   0.0s\n",
      "[CV 4/5; 97/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 97/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.671 total time=   0.0s\n",
      "[CV 5/5; 97/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 97/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=best;, score=0.752 total time=   0.0s\n",
      "[CV 1/5; 98/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 98/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.813 total time=   0.0s\n",
      "[CV 2/5; 98/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 98/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.795 total time=   0.0s\n",
      "[CV 3/5; 98/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 98/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.741 total time=   0.0s\n",
      "[CV 4/5; 98/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 98/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.714 total time=   0.0s\n",
      "[CV 5/5; 98/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 98/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=2, splitter=random;, score=0.723 total time=   0.0s\n",
      "[CV 1/5; 99/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 99/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 2/5; 99/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 2/5; 99/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.723 total time=   0.0s\n",
      "[CV 3/5; 99/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 99/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.786 total time=   0.0s\n",
      "[CV 4/5; 99/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 99/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.711 total time=   0.0s\n",
      "[CV 5/5; 99/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 99/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 1/5; 100/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 100/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.789 total time=   0.0s\n",
      "[CV 2/5; 100/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 100/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.827 total time=   0.0s\n",
      "[CV 3/5; 100/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 100/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.729 total time=   0.0s\n",
      "[CV 4/5; 100/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 100/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.764 total time=   0.0s\n",
      "[CV 5/5; 100/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 100/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=5, splitter=random;, score=0.740 total time=   0.0s\n",
      "[CV 1/5; 101/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 101/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 2/5; 101/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 101/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.759 total time=   0.0s\n",
      "[CV 3/5; 101/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 101/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.758 total time=   0.0s\n",
      "[CV 4/5; 101/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 101/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.709 total time=   0.0s\n",
      "[CV 5/5; 101/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 101/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=best;, score=0.778 total time=   0.0s\n",
      "[CV 1/5; 102/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 102/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.815 total time=   0.0s\n",
      "[CV 2/5; 102/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 102/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 3/5; 102/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 102/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.811 total time=   0.0s\n",
      "[CV 4/5; 102/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 102/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.750 total time=   0.0s\n",
      "[CV 5/5; 102/108] START criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 102/108] END criterion=entropy, max_depth=30, min_samples_leaf=2, min_samples_split=10, splitter=random;, score=0.817 total time=   0.0s\n",
      "[CV 1/5; 103/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 1/5; 103/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.818 total time=   0.0s\n",
      "[CV 2/5; 103/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 2/5; 103/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.781 total time=   0.0s\n",
      "[CV 3/5; 103/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 3/5; 103/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 103/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 4/5; 103/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.722 total time=   0.0s\n",
      "[CV 5/5; 103/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best\n",
      "[CV 5/5; 103/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=best;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 104/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 1/5; 104/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 104/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 2/5; 104/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.816 total time=   0.0s\n",
      "[CV 3/5; 104/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 3/5; 104/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 104/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 4/5; 104/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.781 total time=   0.0s\n",
      "[CV 5/5; 104/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random\n",
      "[CV 5/5; 104/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=2, splitter=random;, score=0.790 total time=   0.0s\n",
      "[CV 1/5; 105/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 1/5; 105/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.818 total time=   0.0s\n",
      "[CV 2/5; 105/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 2/5; 105/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.781 total time=   0.0s\n",
      "[CV 3/5; 105/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 3/5; 105/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.762 total time=   0.0s\n",
      "[CV 4/5; 105/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 4/5; 105/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.722 total time=   0.0s\n",
      "[CV 5/5; 105/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best\n",
      "[CV 5/5; 105/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=best;, score=0.779 total time=   0.0s\n",
      "[CV 1/5; 106/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 1/5; 106/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.783 total time=   0.0s\n",
      "[CV 2/5; 106/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 2/5; 106/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.816 total time=   0.0s\n",
      "[CV 3/5; 106/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 3/5; 106/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.791 total time=   0.0s\n",
      "[CV 4/5; 106/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 4/5; 106/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.781 total time=   0.0s\n",
      "[CV 5/5; 106/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random\n",
      "[CV 5/5; 106/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=5, splitter=random;, score=0.790 total time=   0.0s\n",
      "[CV 1/5; 107/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 1/5; 107/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.817 total time=   0.0s\n",
      "[CV 2/5; 107/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 2/5; 107/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.785 total time=   0.0s\n",
      "[CV 3/5; 107/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 3/5; 107/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.749 total time=   0.0s\n",
      "[CV 4/5; 107/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 4/5; 107/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.715 total time=   0.0s\n",
      "[CV 5/5; 107/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best\n",
      "[CV 5/5; 107/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=best;, score=0.796 total time=   0.0s\n",
      "[CV 1/5; 108/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 1/5; 108/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.850 total time=   0.0s\n",
      "[CV 2/5; 108/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 2/5; 108/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.806 total time=   0.0s\n",
      "[CV 3/5; 108/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 3/5; 108/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.784 total time=   0.0s\n",
      "[CV 4/5; 108/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 4/5; 108/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.768 total time=   0.0s\n",
      "[CV 5/5; 108/108] START criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random\n",
      "[CV 5/5; 108/108] END criterion=entropy, max_depth=30, min_samples_leaf=4, min_samples_split=10, splitter=random;, score=0.776 total time=   0.0s\n"
     ]
    }
   ],
   "source": [
    "performance = []\n",
    "testing = []\n",
    "for classifier, params in parameters.items():\n",
    "    model = GridSearchCV(params[\"classifier\"], params[\"params\"], cv=5, verbose=10, scoring=\"roc_auc\")\n",
    "    \n",
    "    model.fit(X_train, y_train)\n",
    "    ypred = model.predict(X_test)\n",
    "    \n",
    "    performance.append({\"Model\": classifier, \"Best Score\": model.best_score_, \"Best Parameters\": model.best_params_})\n",
    "    testing.append({\"Model\": classifier, \"score\": accuracy_score(ypred, y_test)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'Model': 'LogisticRegression',\n",
       "  'Best Score': 0.737614077708068,\n",
       "  'Best Parameters': {'C': 0.1, 'penalty': 'l1', 'solver': 'saga'}},\n",
       " {'Model': 'RandomForestClassifier',\n",
       "  'Best Score': 0.8542998471775773,\n",
       "  'Best Parameters': {'max_depth': 10,\n",
       "   'min_samples_leaf': 1,\n",
       "   'min_samples_split': 2,\n",
       "   'n_estimators': 100}},\n",
       " {'Model': 'GradientBoostingClassifier',\n",
       "  'Best Score': 0.8491430357227093,\n",
       "  'Best Parameters': {'learning_rate': 0.1,\n",
       "   'max_depth': 5,\n",
       "   'min_samples_split': 10,\n",
       "   'n_estimators': 50}},\n",
       " {'Model': 'DecisionTreeClassifier',\n",
       "  'Best Score': 0.8066487712433276,\n",
       "  'Best Parameters': {'criterion': 'entropy',\n",
       "   'max_depth': 10,\n",
       "   'min_samples_leaf': 4,\n",
       "   'min_samples_split': 10,\n",
       "   'splitter': 'random'}}]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6261682242990654"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf4 = LogisticRegression(C=10, penalty=\"l1\", solver=\"saga\",random_state=42)\n",
    "clf4.fit(X_train, y_train)\n",
    "clf4_ypred = clf4.predict(X_test)\n",
    "accuracy_score(clf4_ypred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DecsionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy on testing set: 0.677570093457944\n"
     ]
    }
   ],
   "source": [
    "clf3 = DecisionTreeClassifier(\n",
    "    criterion=\"entropy\", max_depth= 10, min_samples_leaf=4, min_samples_split=10, splitter=\"random\", random_state=42\n",
    ")\n",
    "clf3.fit(X_train, y_train)\n",
    "clf3_ypred = clf3.predict(X_test)\n",
    "# print(\"The accuracy on training set:\", clf3.score(X_train, y_train))\n",
    "print(\"The accuracy on testing set:\", accuracy_score(clf3_ypred, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6962616822429907"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf1 = GradientBoostingClassifier(n_estimators =50, learning_rate=0.1, max_depth=5, min_samples_split=2, random_state=42)\n",
    "clf1.fit(X_train, y_train)\n",
    "clf1_ypred = clf1.predict(X_test)\n",
    "accuracy_score(clf1_ypred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### GradientBoostingClassifier ConfusionMatrixDisplay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm1 = confusion_matrix(clf1_ypred, y_test, labels=clf1.classes_)\n",
    "disp1 = ConfusionMatrixDisplay(cm1, display_labels=clf1.classes_)\n",
    "disp1.plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7242990654205608"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2 = RandomForestClassifier(n_estimators=40, max_depth=10, min_samples_leaf=1, min_samples_split=2, random_state=0)\n",
    "clf2.fit(X_train, y_train)\n",
    "clf2_ypred = clf2.predict(X_test)\n",
    "accuracy_score(clf2_ypred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### RandomForestClassifier ConfusionMatrixDisplay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm2 = confusion_matrix(clf2_ypred, y_test, labels=clf2.classes_)\n",
    "disp2 = ConfusionMatrixDisplay(cm2, display_labels=clf2.classes_)\n",
    "disp2.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Classification Report for RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.68      0.79      0.73       102\n",
      "           1       0.78      0.66      0.71       112\n",
      "\n",
      "    accuracy                           0.72       214\n",
      "   macro avg       0.73      0.73      0.72       214\n",
      "weighted avg       0.73      0.72      0.72       214\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, clf2_ypred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Classification Report for GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.66      0.75      0.70       102\n",
      "           1       0.74      0.65      0.69       112\n",
      "\n",
      "    accuracy                           0.70       214\n",
      "   macro avg       0.70      0.70      0.70       214\n",
      "weighted avg       0.70      0.70      0.70       214\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, clf1_ypred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature Importances "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "importances = clf1.feature_importances_\n",
    "feat_imp = pd.Series(importances, index=X.columns).sort_values(ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_imp.plot(kind = \"barh\")\n",
    "plt.title(\"Feature Importances\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "From our feature importances, it can be said that chest pain had the most impact on the target variable or the highest predicting power followed by maximum heart rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "852\n",
      "214\n",
      "1066\n"
     ]
    }
   ],
   "source": [
    "print(len(X_train))\n",
    "print(len(X_test))\n",
    "print(len(X_train) + len(X_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
